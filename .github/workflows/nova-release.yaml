---
name: "Nova SDK: Release package"
on:
  push:
    branches:
      - main
      - 'release/**'          # release/1.x, release/customer-foo, ...

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release-${{ github.ref_name }}   # isolate queues per branch
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Generate token for pipeline-version-bumper app
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PIPELINE_VERSION_BUMPER_APP_ID }}
          private_key: ${{ secrets.PIPELINE_VERSION_BUMPER_PRIVATE_KEY }}

      - name: Checkout repository at workflow SHA
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Force correct branch at workflow SHA
        run: git checkout -B ${{ github.ref_name }} ${{ github.sha }}

      - uses: cschleiden/replace-tokens@v1.3
        env:
          NOVA_AUTH0_DOMAIN: ${{ secrets.NOVA_AUTH0_DOMAIN }}
          NOVA_AUTH0_CLIENT_ID: ${{ secrets.NOVA_AUTH0_CLIENT_ID }}
          NOVA_AUTH0_AUDIENCE: ${{ secrets.NOVA_AUTH0_AUDIENCE }}
        with:
          files: '["nova/auth/auth_config.py"]'

      - name: Semantic Version Release
        id: semrel
        if: github.ref_name == 'main'
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          build: true
          # Use the app token so pushes/tags come from the app actor
          github_token: ${{ steps.app-token.outputs.token }}
          # These are cosmetic; the *actor* is determined by the token above
          git_committer_name: "pipeline-version-bumper[bot]"
          git_committer_email: "pipeline-version-bumper[bot]@users.noreply.github.com"

      - name: Build wheel & bump post-build number (release/*)
        if: startsWith(github.ref_name, 'release/')
        id: build
        run: |
          BASE_POINT=$(git merge-base origin/main HEAD || git rev-list --max-parents=0 HEAD)
          COMMITS=$(git rev-list --count ${BASE_POINT}..HEAD)

          DATE=$(date +%Y%m%d)
          BRANCH_SLUG=$(echo "${GITHUB_REF_NAME#release/}" | tr '/' '-')
          BASE_VER=$(grep -m1 '^version' pyproject.toml | cut -d'"' -f2)

          NEW_VER="${BASE_VER}.post${DATE}$(printf '%02d' ${COMMITS})"
          echo "Building ${NEW_VER} for release branch ${BRANCH_SLUG}"

          sed -i -E 's/^(version = ")[^"]+(")$/\1'"${NEW_VER}"'\2/' pyproject.toml

          python -m pip install --upgrade build
          python -m build --wheel --outdir dist    # keep default wheel name

          echo "wheel=$(ls dist/*.whl)" >> "$GITHUB_OUTPUT"

      - name: Publish package to PyPI
        if: |
          (github.ref_name == 'main'  && steps.semrel.outputs.released == 'true') ||
          (startsWith(github.ref_name, 'release/'))
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Upload wheel to GitHub Release assets
        if: steps.semrel.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semrel.outputs.tag }}
