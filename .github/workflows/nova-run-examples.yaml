---
name: "[nova] Run integration tests & examples"
on:
  pull_request:
    branches:
      - main
concurrency:
  group: run-examples-workflow
  cancel-in-progress: false
jobs:
  test-integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          # single entry for the whole integrationâ€‘test batch
          - id: integration
            run_cmd: "pytest -rs -v -m integration"
          # each example gets its own matrix entry
          - id: 01_basic
            run_cmd: "python examples/01_basic.py"
          - id: 02_plan_and_execute
            run_cmd: "python examples/02_plan_and_execute.py"
          - id: 03_move_and_set_ios
            run_cmd: "python examples/03_move_and_set_ios.py"
          - id: 04_move_multiple_robots
            run_cmd: "python examples/04_move_multiple_robots.py"
          - id: 05_selection_motion_group_activation
            run_cmd: "python examples/05_selection_motion_group_activation.py"
          - id: 06_api_usage
            run_cmd: "python examples/06_api_usage.py"
          - id: 08_multi_step_movement_with_collision_free
            run_cmd: "python examples/08_multi_step_movement_with_collision_free.py"
          - id: 14_welding_example
            run_cmd: "python nova_rerun_bridge/examples/14_welding_example.py"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Create NOVA instance and check connection
        env:
          PORTAL_PROD_REFRESH_URL: ${{ secrets.PORTAL_PROD_REFRESH_URL }}
          PORTAL_PROD_REFRESH_CLIENT_ID: ${{ secrets.PORTAL_PROD_REFRESH_CLIENT_ID }}
          PORTAL_PROD_REFRESH_TOKEN: ${{ secrets.PORTAL_PROD_REFRESH_TOKEN }}
          API_VERSION: "v1"
          # Optional
          PROJECT_VERSION: "1.0.0"
          GITHUB_RUN_ID: ${{ github.run_id }}
          INSECURE_CURL: "true"
        run: |
          if ! source ./scripts/create_nova_instance.sh; then
            echo "Failed to create NOVA instance."
            exit 1
          fi

          echo $PORTAL_STG_HOST
          echo "PORTAL_STG_HOST=$PORTAL_STG_HOST" >> $GITHUB_ENV
          echo "PORTAL_STG_INSTANCE_ID=$PORTAL_STG_INSTANCE_ID" >> $GITHUB_ENV
          echo "PORTAL_STG_ACCESS_TOKEN=$PORTAL_STG_ACCESS_TOKEN" >> $GITHUB_ENV
      - name: Set up Python environment
        run: |
          pip install uv
          uv sync --extra "nova-rerun-bridge"
      - name: "Run ${{ matrix.id }} suite"
        run: |
          # export the environment variables for the run command
          echo "NOVA_API=https://${{ env.PORTAL_STG_HOST }}" >> ./.env
          echo "NOVA_ACCESS_TOKEN=${{ env.PORTAL_STG_ACCESS_TOKEN }}" >> ./.env
          echo "CELL_NAME=cell" >> ./.env

          # generic retry wrapper for *all* commands
          n=0
          max=3
          until [ "$n" -ge "$max" ]; do
            echo "\nAttempt $((n+1))/$(($max)) : ${{ matrix.run_cmd }}"
            if PYTHONPATH=. uv run ${{ matrix.run_cmd }}; then
              echo "Succeeded on attempt $((n+1))"
              break
            fi
            n=$((n+1))
            echo "Retrying in 5s..."
            sleep 5
          done

          if [ "$n" -ge "$max" ]; then
            echo "Command failed after $max attempts." >&2
            exit 1
          fi
      - name: Download diagnose package
        if: failure()
        run: |
          echo "Attempting to fetch the diagnosis package..."
          curl --fail -s -X GET \
            "https://${{ env.PORTAL_STG_HOST }}/api/v1/internal/system/diagnosis-package/zip" \
            -H 'Accept: application/zip' \
            -H "Authorization: Bearer ${{ env.PORTAL_STG_ACCESS_TOKEN }}" \
            -o "diagnose-${{ github.run_id }}.zip"
      - name: Upload diagnose artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnose-package
          path: diagnose-${{ github.run_id }}.zip
      # Always run cleanup, whether success or failure
      - name: Cleanup - Delete instance
        if: always()
        run: |
          ./scripts/delete_nova_instance.sh
        env:
          PORTAL_STG_INSTANCE_ID: ${{ env.PORTAL_STG_INSTANCE_ID }}
          PORTAL_STG_ACCESS_TOKEN: ${{ env.PORTAL_STG_ACCESS_TOKEN }}
