---
name: "Nova SDK: Run integration tests & examples"
on:
  pull_request:
    branches:
      - main
concurrency:
  group: run-examples-workflow
  cancel-in-progress: false
jobs:
  # This job creates a NOVA instance and captures the connection details
  setup-instance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Create NOVA instance and capture connection details
        id: create
        env:
          PORTAL_PROD_REFRESH_URL: ${{ secrets.PORTAL_PROD_REFRESH_URL }}
          PORTAL_PROD_REFRESH_CLIENT_ID: ${{ secrets.PORTAL_PROD_REFRESH_CLIENT_ID }}
          PORTAL_PROD_REFRESH_TOKEN: ${{ secrets.PORTAL_PROD_REFRESH_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          if ! source ./scripts/create_nova_instance.sh; then
            echo "Failed to create NOVA instance."
            exit 1
          fi
          # expose as job outputs
          echo "PORTAL_PROD_HOST=$PORTAL_PROD_HOST" >> "$GITHUB_OUTPUT"
          echo "PORTAL_PROD_INSTANCE_ID=$PORTAL_PROD_INSTANCE_ID" >> "$GITHUB_OUTPUT"
          echo "PORTAL_PROD_ACCESS_TOKEN=$PORTAL_PROD_ACCESS_TOKEN" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Store secret ouput
        uses: cloudposse/github-action-secret-outputs@main
        id: role
        with:
          ## PASSWORD is a gpg passphrase stored in Github Secrets.
          secret: ${{ secrets.GPG_PASSWORD }}
          op: encode
          in: ${{ steps.create.outputs.PORTAL_PROD_ACCESS_TOKEN }}
    outputs:
      PORTAL_PROD_HOST: ${{ steps.create.outputs.PORTAL_PROD_HOST }}
      PORTAL_PROD_INSTANCE_ID: ${{ steps.create.outputs.PORTAL_PROD_INSTANCE_ID }}
      PORTAL_PROD_ACCESS_TOKEN: ${{ steps.role.outputs.out }}
  # This job runs the integration tests and examples
  test-integration:
    runs-on: ubuntu-latest
    needs: setup-instance
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          # single entry for the whole integration‑test batch
          - id: integration
            run_cmd: "pytest -rs -v -m integration"
          # each example gets its own matrix entry
          - id: basic
            run_cmd: "python examples/basic.py"
          - id: plan_and_execute
            run_cmd: "python examples/plan_and_execute.py"
          - id: move_multiple_robots
            run_cmd: "python examples/move_multiple_robots.py"
          - id: selection_motion_group_activation
            run_cmd: "python examples/selection_motion_group_activation.py"
          - id: multi_step_movement_with_collision_free
            run_cmd: "python examples/multi_step_movement_with_collision_free.py"
          - id: run_wandelscript_file
            run_cmd: "python examples/run_wandelscript_file.py"
          - id: welding_example
            run_cmd: "python nova_rerun_bridge/examples/welding_example.py"
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Set up Python environment
        run: |
          pip install uv
          uv sync --extra "nova-rerun-bridge" --extra "wandelscript" --extra "novax"
      - name: Decode output secrets
        uses: cloudposse/github-action-secret-outputs@main
        id: role
        with:
          secret: ${{ secrets.GPG_PASSWORD }}
          op: decode
          in: ${{ needs.setup-instance.outputs.PORTAL_PROD_ACCESS_TOKEN }}
      - name: "Run ${{ matrix.id }} suite"
        env:
          NOVA_API: ${{ needs.setup-instance.outputs.PORTAL_PROD_HOST }}
          NOVA_ACCESS_TOKEN: ${{ steps.role.outputs.out }}
          # used for publishing nats data
          CELL_NAME: cell
        run: |
          echo "DEBUG: decoded token length = ${#NOVA_ACCESS_TOKEN}"
          [[ -z "${NOVA_ACCESS_TOKEN}" ]] && {
            echo "❌ NOVA_ACCESS_TOKEN is empty. Aborting."; exit 1; }

          # generic retry wrapper for *all* commands
          n=0; max=3
          until [ "$n" -ge "$max" ]; do
            echo -e "\nAttempt $((n+1))/$max : ${{ matrix.run_cmd }}"
            if PYTHONPATH=. NOVA_API=$NOVA_API NOVA_ACCESS_TOKEN=$NOVA_ACCESS_TOKEN uv run ${{ matrix.run_cmd }}; then
              echo "Succeeded on attempt $((n+1))"
              break
            fi
            n=$((n+1))
            echo "Retrying in 5 s…"; sleep 5
          done
          if [ "$n" -ge "$max" ]; then
            echo "Command failed after $max attempts." >&2
            exit 1
          fi
      - name: Download diagnose package
        if: failure()
        run: |
          echo "Attempting to fetch the diagnosis package…"
          curl --fail -s -X GET \
            "https://${PORTAL_PROD_HOST}/api/v1/internal/system/diagnosis-package/zip" \
            -H 'Accept: application/zip' \
            -H "Authorization: Bearer ${PORTAL_PROD_ACCESS_TOKEN}" \
            -o "diagnose-${{ github.run_id }}.zip"
      - name: Upload diagnose artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnose-package
          path: diagnose-${{ github.run_id }}.zip
  integration-summary:
    if: ${{ always() }}
    needs: [test-integration]
    runs-on: ubuntu-latest
    steps:
      - name: Check integration results
        run: |
          if [ "${{ needs.test-integration.result }}" != "success" ]; then
            echo "Integration tests failed"
            exit 1
          fi
          echo "All integration tests passed"
  # This job cleans up the NOVA instance
  cleanup-instance:
    if: ${{ always() }}
    needs: [setup-instance, test-integration]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Decode output secrets
        uses: cloudposse/github-action-secret-outputs@main
        id: role
        with:
          secret: ${{ secrets.GPG_PASSWORD }}
          op: decode
          in: ${{ needs.setup-instance.outputs.PORTAL_PROD_ACCESS_TOKEN }}
      - name: Cleanup - Delete instance
        run: ./scripts/delete_nova_instance.sh
        env:
          PORTAL_PROD_INSTANCE_ID: ${{ needs.setup-instance.outputs.PORTAL_PROD_INSTANCE_ID }}
          PORTAL_PROD_ACCESS_TOKEN: ${{ steps.role.outputs.out }}
