name: Integration Test

on:
  pull_request:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest
    env:
      API_VERSION: "v1"
      API_URL: ""

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Retrieve access token
        run: |
          echo "## Updating the refresh token..."
          PORTAL_STG_ACCESS_TOKEN=$(curl --request POST \
            --url "${{ secrets.PORTAL_STG_REFRESH_URL }}" \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data grant_type=refresh_token \
            --data "client_id=${{ secrets.PORTAL_STG_REFRESH_CLIENT_ID }}" \
            --data "refresh_token=${{ secrets.PORTAL_STG_REFRESH_TOKEN }}" | jq -r .access_token)

          echo "Access token = ${PORTAL_STG_ACCESS_TOKEN}"

          # Expose the new token to subsequent steps
          echo "PORTAL_STG_ACCESS_TOKEN=${PORTAL_STG_ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Create instance
        run: |
          echo "Create instance with Service Manager $PROJECT_VERSION"
          response=$(curl -X "POST" "https://io.stg.wandelbots.io/instance" \
            -H "accept: application/json" \
            -H "Authorization: Bearer ${{ env.PORTAL_STG_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"sandbox_name\": \"svcmgr-${{ github.run_id }}\"}")

          echo "Response = ${response}"
          PORTAL_STG_HOST=$(echo "$response" | jq -r .host)
          PORTAL_STG_INSTANCE_ID=$(echo "$response" | jq -r .instance_id)

          echo "Host = $PORTAL_STG_HOST"
          echo "Instance ID = $PORTAL_STG_INSTANCE_ID"

          # Write host and instance variables to the GitHub Actions environment
          echo "PORTAL_STG_HOST=${PORTAL_STG_HOST}" >> $GITHUB_ENV
          echo "PORTAL_STG_INSTANCE_ID=${PORTAL_STG_INSTANCE_ID}" >> $GITHUB_ENV

      - name: Check service availability
        run: |
          API_URL="https://${{ env.PORTAL_STG_HOST }}/api/${{ env.API_VERSION }}"
          echo "API URL: ${API_URL}"
          echo "API_URL=${API_URL}" >> $GITHUB_ENV

          # Wait for the service-manager-backend to become available
          curl --fail --retry-all-errors --retry 7 --retry-max-time 10 \
            --header "Authorization: Bearer ${{ env.PORTAL_STG_ACCESS_TOKEN }}" \
            "${API_URL}/cells"

      - name: Create and remove test cell
        run: |
          TEST_CELL_NAME="testcell$((RANDOM % 1001))"
          echo "Testcell name: ${TEST_CELL_NAME}"

          # Create cell
          curl --request POST \
            --url "${API_URL}/cells?completionTimeout=200" \
            --header "Authorization: Bearer ${{ env.PORTAL_STG_ACCESS_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data "{ \"name\": \"${TEST_CELL_NAME}\" }"

          # Remove cell to save resources
          curl --request DELETE \
            --url "${API_URL}/cells/${TEST_CELL_NAME}" \
            --header "Accept: application/json" \
            --header "Authorization: Bearer ${{ env.PORTAL_STG_ACCESS_TOKEN }}"

      - name: Set up Python environment
        run: |
          pip install poetry
          poetry install
          touch ./.env
          echo "NOVA_API=${{ env.PORTAL_STG_HOST }}" > ./.env
          echo "NOVA_USERNAME=${{ secrets.NOVA_USERNAME }}" > ./.env
          echo "NOVA_PASSWORD=${{ secrets.NOVA_PASSWORD }}" > ./.env
          echo "CELL_NAME=cell" >> ./.env
          cat ./.env

      - name: Test examples
        run: |
          echo "Running test examples"
          PYTHONPATH=. poetry run pytest -v examples/

      # Always run cleanup, whether success or failure
      - name: Cleanup - delete instance
        if: always()
        run: |
          echo "Delete instance ${{ env.PORTAL_STG_INSTANCE_ID }}"
          curl -X 'DELETE' \
            "https://io.stg.wandelbots.io/instance/${{ env.PORTAL_STG_INSTANCE_ID }}" \
            -H 'accept: application/json' \
            -H "Authorization: Bearer ${{ env.PORTAL_STG_ACCESS_TOKEN }}"
