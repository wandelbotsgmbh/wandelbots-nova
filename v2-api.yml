openapi: 3.1.0
info:
  title: Wandelbots NOVA API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Interact with robots in an easy and intuitive way.

    > **Note:** API version 2 is experimental and will experience functional changes.
  contact:
    name: Copyright (c) 2024 Wandelbots GmbH
    url: https://www.wandelbots.com
  version: 2.0.0 beta
servers:
  - url: /api/v2
security:
  - BearerAuth: []
  - BasicAuth: []
tags:
  - name: System
  - name: Cell
  - name: Controller
  - name: Motion Group
  - name: Motion Group Info
  - name: Motion Group Kinematics
  - name: Trajectory Planning
  - name: Trajectory Execution
  - name: Jogging
  - name: Program
  - name: Program Values
  - name: Program Operator
  - name: Virtual Robot
  - name: Virtual Robot Setup
  - name: Virtual Robot Mode
  - name: Virtual Robot Behavior
  - name: Controller Inputs/Outputs
  - name: Coordinate Systems
  - name: Application
  - name: Store
  - name: Store Object
  - name: Store Program
  - name: Store Collision Components
  - name: Store Collision Scenes
paths:
  /cells:
    get:
      summary: List Cells
      description: |-
        List all deployed cell names.
        If no cells are deployed, an empty list is returned.
      operationId: listCells
      tags:
        - Cell
      responses:
        '200':
          description: A Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameList'
    post:
      summary: Add Cell
      description: |-
        Deploy an entire cell with all its resources.

        A cell can be used to deploy a robot controller, one or more robots, as well as custom applications.

        Refer to the [Wandelbots NOVA documentation](docs/wandelbots-nova-api/#create-a-cell) for more information.
      operationId: deployCell
      tags:
        - Cell
      parameters:
        - $ref: '#/components/parameters/Timeout'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cell'
            examples:
              default:
                $ref: '#/components/examples/DefaultCell'
      responses:
        '200':
          description: The creation was successfully completed.
        '202':
          description: The creation was initiated.
        '403':
          description: This operation is not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: A cell with this name already exists.
  /cells/{cell}:
    get:
      summary: Configuration
      description: |
        List all cell resources.

        > **NOTE**
        >
        > The output generated by this endpoint can be too large for the site to handle, and may produce an error or incorrect output.
        > Use `curl` in combination with `> output.json` to capture the output, or use an API client like Postman.
      operationId: getCell
      tags:
        - Cell
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cell'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update Configuration
      description: Update the definition of the entire Cell.
      operationId: updateCell
      tags:
        - Cell
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Timeout'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cell'
            examples:
              default:
                $ref: '#/components/examples/DefaultCell'
      responses:
        '200':
          description: The update was successfully completed.
        '202':
          description: The update was initiated.
        '400':
          description: The provided parameters are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: This operation is not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete Cell
      description: Delete an entire cell.
      operationId: deleteCell
      tags:
        - Cell
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Timeout'
      responses:
        '200':
          description: Deletion was successfully completed.
        '202':
          description: Deletion was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/status:
    get:
      summary: Service Status
      description: List the status of all cell resources.
      operationId: getCellStatus
      tags:
        - Cell
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Operating State
      description: Deactivate or activate the services of a cell.
      operationId: setCellStatus
      tags:
        - Cell
      parameters:
        - $ref: '#/components/parameters/Cell'
        - in: query
          name: operating_state
          required: true
          schema:
            $ref: '#/components/schemas/OperatingState'
          description: Set state of the cell. Active or inactive.
      responses:
        '202':
          description: The update was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers:
    get:
      tags:
        - Controller
      summary: List
      description: |
        List all configured robot controllers.
      operationId: listControllers
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllersList'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Add Robot Controller
      description: |
        Add a robot controller to the cell.

        <!-- theme: warning -->
        > **WARNING**
        >
        > Using it in conjunction with the settings app may lead to unpredictable behavior.
      operationId: addRobotController
      tags:
        - Controller
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Timeout'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotController'
            examples:
              Abb:
                $ref: '#/components/examples/AbbController'
              Fanuc:
                $ref: '#/components/examples/FanucController'
              Kuka:
                $ref: '#/components/examples/KukaController'
              UniversalRobots:
                $ref: '#/components/examples/UrController'
              Virtual:
                $ref: '#/components/examples/VirtualController'
              Yaskawa:
                $ref: '#/components/examples/YaskawaController'
      responses:
        '200':
          description: The creation was successfully completed.
        '202':
          description: The creation was initiated.
        '403':
          description: This operation is not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: A robot controller with this name already exists in the cell.
    delete:
      summary: Clear Robot Controllers
      description: |
        Delete all robot controllers from the cell.

        To replace all robot controllers in a cell, use this endpoint in combination with the 'Add Robot Controller' endpoint.

        <!-- theme: warning -->
        > **WARNING**
        >
        > Using it in conjunction with the settings app may lead to unpredictable behavior.
      operationId: clearRobotControllers
      tags:
        - Controller
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Timeout'
      responses:
        '200':
          description: Deletion was successfully completed.
        '202':
          description: Deletion was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}:
    get:
      summary: Robot Controller Configuration
      description: |
        Get the configuration for a robot controller.
      operationId: getRobotController
      tags:
        - Controller
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotController'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update Robot Controller Configuration
      description: |
        Update the configuration of a robot controller.

        Reconfigure certain options of a robot controller, or deploy a specific container image of a robot controller.

        <!-- theme: warning -->
        > **WARNING**
        >
        > Using it in conjunction with the settings app may lead to unpredictable behavior.
      operationId: updateRobotController
      tags:
        - Controller
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/Timeout'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotController'
            examples:
              Abb:
                $ref: '#/components/examples/AbbController'
              Fanuc:
                $ref: '#/components/examples/FanucController'
              Kuka:
                $ref: '#/components/examples/KukaController'
              UniversalRobots:
                $ref: '#/components/examples/UrController'
              Virtual:
                $ref: '#/components/examples/VirtualController'
              Yaskawa:
                $ref: '#/components/examples/YaskawaController'
      responses:
        '200':
          description: The update was successfully completed.
        '202':
          description: The update was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete Robot Controller
      description: |
        Delete a robot controller from the cell.

        <!-- theme: warning -->
        > **WARNING**
        >
        > Using it in conjunction with the settings app may lead to unpredictable behavior.
      operationId: deleteRobotController
      tags:
        - Controller
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/Timeout'
      responses:
        '200':
          description: Deletion was successfully completed.
        '202':
          description: Deletion was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/apps:
    get:
      summary: List Applications
      description: |
        List all GUI applications that have been added to a cell.
        with the 'Add Application' endpoint. If the cell does not contain GUI applications, the list is returned empty.
      operationId: listApps
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NameList'
    post:
      summary: Add Application
      description: |
        Install a basic, containerized web application to the cell to control robots with a customized frontend.

        Prerequisites: A Docker hub account or similar container registry account, with valid credentials.

        After adding the application to the cell, open the application on the Wandelbots NOVA home screen.

        Read [build your application](/docs/docs/development/) for more information.

        <!-- theme: none -->
        > #### Predefined Environment Variables
        > - `NOVA_API`: The endpoint where the API is reachable from the container serving the Application.
        > - `BASE_PATH`: The root path of the deployed Application. It will be reachable via: http://$host/$BASE_PATH
        > - `CELL_NAME`: The name of the cell where the application is deployed.
      operationId: addApp
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Timeout'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
            examples:
              swagger-ui:
                $ref: '#/components/examples/AppSwaggerUI'
      responses:
        '200':
          description: The creation was successfully completed.
        '202':
          description: The creation was initiated.
        '409':
          description: An app with this name already exists in this cell.
    delete:
      summary: Clear Applications
      description: Delete all GUI applications from the cell.
      operationId: clearApps
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Timeout'
      responses:
        '200':
          description: Deletion was successfully completed.
        '202':
          description: Deletion was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/apps/{app}:
    get:
      summary: Configuration
      description: |
        Get the configuration for an active GUI application in the cell.
        To update the configuration of a GUI application in the cell, use this configuration with the 'Update Configuration' endpoint.
      operationId: getApp
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/App'
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update Configuration
      description: Update the configuration of a GUI application in the cell.
      operationId: updateApp
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/App'
        - $ref: '#/components/parameters/Timeout'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
            examples:
              swagger-ui:
                $ref: '#/components/examples/AppSwaggerUI'
      responses:
        '200':
          description: The update was successfully completed.
        '202':
          description: The update was initiated.
        '400':
          description: The provided parameters are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete Application
      description: Delete a GUI application from the cell.
      operationId: deleteApp
      tags:
        - Application
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/App'
        - $ref: '#/components/parameters/Timeout'
      responses:
        '200':
          description: Deletion was successfully completed.
        '202':
          description: Deletion was initiated.
        '404':
          $ref: '#/components/responses/NotFound'
  /system/update:
    put:
      summary: Update Wandelbots NOVA version
      description: |
        Update the Wandelbots NOVA version and all attached services.

        Sending this API Request will trigger an update of all NOVA services that are part of a cell.
        Previous cells and cell configurations will remain on the instance.

        If the update fails, the previous Wandelbots NOVA version is restored.
      operationId: updateNovaVersion
      tags:
        - System
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                An update is defined by the indicated Wandelbots NOVA release channel.
              required:
                - channel
              properties:
                channel:
                  $ref: '#/components/schemas/ReleaseChannel'
      responses:
        '200':
          description: The update was triggered successfully.
        '204':
          description: No update available
        '400':
          description: An invalid request was provided.
        '501':
          description: This instance of Wandelbots NOVA cannot be updated.
    get:
      summary: Check update
      description: |
        Check if a more recent Wandelbots NOVA Version is available.
      operationId: checkNovaVersionUpdate
      tags:
        - System
      parameters:
        - name: channel
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ReleaseChannel'
      responses:
        '200':
          description: An update is available
          content:
            text/plain:
              schema:
                type: string
                description: The Wandelbots NOVA version.
              example: 24.1.0
        '204':
          description: No update available
  /system/version:
    get:
      summary: Wandelbots NOVA Version
      description: |
        Get the current Wandelbots NOVA version.
      operationId: getSystemVersion
      tags:
        - System
      responses:
        '200':
          description: The operation was successful.
          content:
            text/plain:
              schema:
                type: string
                description: The Wandelbots NOVA version.
              example: 24.1.0
  /system/status:
    get:
      summary: Wandelbots NOVA status
      description: |
        Get the status of all system services.
      operationId: getSystemStatus
      tags:
        - System
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatusList'
  /system/diagnosis-package/zip:
    get:
      summary: Download Diagnosis Package
      description: |
        Collects information on the current status of all NOVA services and exports them as a .zip file.

        Includes information on all cells on the instance such as the service logs and virtual robot controllers.
        From each cell the logs of all services are included, as well as the configuration of each connected controller to start virtual robots.
      operationId: getDiagnosePackage
      tags:
        - System
      responses:
        '200':
          description: Diagnose package successfully created.
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /system/configuration/resources:
    get:
      tags:
        - System
      summary: List Configuration Resources
      description: |
        Retrieves a list of all available configuration resources for backup purposes.
      operationId: listConfigurationResources
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResourceArray'
              examples:
                DefaultCell:
                  $ref: '#/components/examples/CellDefault'
  /system/configuration:
    get:
      tags:
        - System
      summary: Retrieve Configuration Backup
      description: |
        Retrieves a configuration backup based on provided resource identifiers.
      operationId: backupConfiguration
      parameters:
        - $ref: '#/components/parameters/Resources'
        - $ref: '#/components/parameters/Metadata'
      responses:
        '200':
          description: Successful response
          content:
            application/gzip:
              schema:
                $ref: '#/components/schemas/ConfigurationArchive'
        '400':
          description: Invalid configuration resources provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-2'
    post:
      tags:
        - System
      summary: Restore Configuration Backup
      description: |
        Restores a previously backed up configuration.
      operationId: restoreConfiguration
      parameters:
        - $ref: '#/components/parameters/Resources'
      requestBody:
        description: Backup file stream containing the configuration to restore.
        required: true
        content:
          application/gzip:
            schema:
              $ref: '#/components/schemas/ConfigurationArchive'
      responses:
        '200':
          description: Successful response
        '400':
          description: Invalid configuration resources or backup file provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-2'
  /license:
    get:
      tags:
        - License
      summary: Get license
      description: Get information on the license used with the Wandelbots NOVA instance, e.g. licensed product, expiration date, license status.
      operationId: getLicense
      responses:
        '200':
          description: Current license information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '404':
          description: No license found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - License
      summary: Activate license
      description: |
        Activates a license using the provided license owner authentication token.

        The refresh token is used to enable communication with the license provider without requiring user interaction.
      operationId: activateLicense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The authentication token to fetch the license from the license server.
              required:
                - owner_refresh_token
              properties:
                owner_refresh_token:
                  type: string
      responses:
        '200':
          description: The license was sucessfully activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '403':
          description: The provided license owner cannot be authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No license found for the provided license owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - License
      summary: Deactivate license
      description: Deactivates active license.
      operationId: deactivateLicense
      responses:
        '200':
          description: The license was sucessfully deactivated
  /license/status:
    get:
      tags:
        - License
      summary: Get license status
      description: Get the license status. If `valid`, Wandelbots NOVA can be used. If `expired`, the license has to be renewed in order to use Wandelbots NOVA.
      operationId: getLicenseStatus
      responses:
        '200':
          description: The license is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseStatus'
        '403':
          description: The license is expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseStatus'
  /cells/{cell}/controllers/{controller}/controller-capabilities:
    get:
      tags:
        - Controller
      summary: Supported Motion Modes
      description: |
        Lists supported operating modes.
        Usually cobots support free drive and control, industrial robots only support control.
      operationId: getSupportedModes
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerCapabilities'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/free-drive-stream:
    get:
      tags:
        - Controller
      summary: Stream Free Drive Mode
      description: |
        Sets the robot controller into freedrive mode and stays in freedrive until the websocket connection is closed by the client.
        In freedrive mode, it is possible to move the attached motion groups by hand.
        This is a blocking call. As long as the websocket connection is open, no other endpoint can control or move the robot.

        <!-- theme: danger -->

        > **DANGER**

        > Danger caused by robot. Improper assessment by the integrator of the application-specific hazards can result in people being
        > crushed, drawn in or caught due to the robot's complex movement sequences. Before opening the websocket, ensure that

        > - The robot is in a safe state,

        > - The right payload is set (e.g by using the (getActivePayload)[getActivePayload] endpoint),

        > - No humans or object are within the robot's reach or within the cell.

        As long as the websocket connection is open you will get the current state of the robot system in the response in the specified response_rate.
        If the activation failed, the returned status will return possible reasons for the failure.

        Free drive mode is only available for robot controllers that support it, in particular Collobarative Robots ("Cobots").
        Use the (getSupportedModes)[getSupportedModes] endpoint to check if the robot controller supports free drive mode.
      operationId: streamFreeDrive
      x-serverstream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: response_rate
          in: query
          schema:
            type: integer
            format: uint32
            description: Update rate for the response message in ms. If not set 200ms are used.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotControllerState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/ios/description:
    get:
      tags:
        - Controller Inputs/Outputs
      summary: List Descriptions
      description: |
        Lists the input/output descriptions of the robot controller.

        The input/output descriptions contain information such as the name of the input/output, the input/output type and the input/output unit.
        The set of available inputs/outputs is defined by the robot controller.
        Each input/output has a unique identifier. If no identifiers are specified in the request, the full list of available inputs/outputs is retrieved by this endpoint.
        Except when a filter (direction, value_type, group) is applied. Then only the inputs/outputs matching the filter are returned.
      operationId: listIODescriptions
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: ios
          in: query
          schema:
            type: array
            description: |
              Array of input/output identifiers to retrieve the descriptions for.
              If empty or not provided, descriptions of all available inputs/outputs for the requested robot controller will be returned.
            items:
              type: string
        - name: direction
          in: query
          schema:
            $ref: '#/components/schemas/IODirection'
          description: |
            Return only inputs/outputs with the specified direction.
        - name: value_type
          in: query
          schema:
            $ref: '#/components/schemas/IOValueType'
          description: |
            Return only inputs/outputs with the specified value type.
        - name: group
          in: query
          schema:
            type: string
          description: |
            Return only inputs/outputs from the specified group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIODescriptionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/ios/stream:
    get:
      tags:
        - Controller Inputs/Outputs
      summary: Stream Input/Output Values
      description: |
        Continuously receive updates of input/output values via websocket.
        Updates are sent in the update rate of the controller.

        > **NOTE**
        >
        > Do not request too many values simultaneously as the request is then likely to fail. The amount of values that can be streamed simultaneously depends on the specific robot controller.

        > **NOTE**
        >
        > The inputs and outputs are sent in the update rate of the controller to prevent losing any values. Consider that this might lead to a high amount of data transmitted.
      operationId: streamIOValues
      x-serverstream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: ios
          in: query
          schema:
            type: array
            items:
              type: string
            description: |
              Array of input/output identifiers to retrieve the values for.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIOValuesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/ios/values:
    get:
      tags:
        - Controller Inputs/Outputs
      summary: Get Input/Output Values
      description: |
        Retrieves the current values of inputs/outputs.

        The identifiers of the inputs/outputs must be provided in the request.
        Request all available input/output identifiers via [listIODescriptions](listIODescriptions).
      operationId: listIOValues
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: ios
          in: query
          schema:
            type: array
            items:
              type: string
            description: |
              Array of input/output identifiers to retrieve the values for.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIOValuesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Controller Inputs/Outputs
      summary: Set Output Values
      description: |
        Set the values of outputs.

        All available output identifiers and possible value ranges can be requested via [listIODescriptions](listIODescriptions).

        The call will return once the values have been set on and accepted by the robot. This might take up to 200 milliseconds.

        > **NOTE**
        >
        > Do not call this endpoint while another request is still in progress. The second call will fail.
      operationId: setOutputValues
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/IOBooleanValue'
                  - $ref: '#/components/schemas/IOIntegerValue'
                  - $ref: '#/components/schemas/IOFloatValue'
                discriminator:
                  propertyName: value_type
                  mapping:
                    boolean: '#/components/schemas/IOBooleanValue'
                    integer: '#/components/schemas/IOIntegerValue'
                    float: '#/components/schemas/IOFloatValue'
              example:
                - io: io1
                  boolean_value: true
                  value_type: boolean
                - io: io2
                  integer_value: '42'
                  value_type: integer
                - io: io3
                  float_value: 3.14
                  value_type: float
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /cells/{cell}/controllers/{controller}/ios/wait-for:
    post:
      tags:
        - Controller Inputs/Outputs
      summary: Wait For
      description: |
        Wait until an input/output reaches a certain value.
        This call returns as soon as the condition is met or the request fails.

        The comparison_type value is used to define how the current value of the input/output is compared with given value.
        Only set the value that corresponds to the value_type of the input/output, see (listIODescriptions)[listIODescriptions] for more information.
        Examples:
        If you want to wait until an analog input ("AI_1") is less than 10, you would set io to "AI_1" comparison_type to COMPARISON_LESS and only integer_value to 10.
        If you want to wait until an analog input ("AI_2") is greater than 5.0, you would set io to "AI_2" comparison_type to COMPARISON_GREATER and only float_value to 5.0.
        If you want to wait until a digital input ("DI_3") is true, you would set io to "DI_3" comparison_type to COMPARISON_EQUAL and only boolean_value to true.
      operationId: waitForIOEvent
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitForIOEventRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/mode:
    get:
      tags:
        - Controller
      summary: Current Mode
      description: |
        Get the current robot system mode of a registered robot controller.
        The robot system mode indicates if a robot controller can be used. See [setDefaultMode](setDefaultMode) for more information about the different modes.
        The mode is influenced by the operating mode of the robot controller. The operating mode can be changed via [setDefaultMode](setDefaultMode).
        Request the current operating mode of the robot controller via [getCurrentRobotControllerState](getCurrentRobotControllerState).
      operationId: getMode
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Controller
      summary: Set Default Mode
      description: |
        Switch between monitor and control usage as default for a robot controller.
        Monitoring mode is used to read information from the robot controller and control mode is used to command the robot system.
        As long as the robot controller is connected via network monitoring mode is always possible. To switch to control mode
        the robot controller must be in `automatic` or `manual` operating mode and safety state 'normal' or 'reduced'. If the robot controller is in `manual` operating mode,
        you have manually confirm the control usage activation on the robot control panel. This manual confirmation can't be replaced with this API.
        Without manual confirmation the robot controller will stay in monitor mode.

        The robot system will try to activate the required operation mode for the requested usage unless no active call requires a different mode.

        > **NOTE**
        >
        > Some robot controllers prevent the external activation of automatic operating mode. In this case, changing the operating mode manually at the robot controller is mandatory.

        > **NOTE**
        >
        > The current operation mode and safety state can be requested via [getCurrentRobotControllerState](getCurrentRobotControllerState).

        If a mode change is not possible, the response lists reasons for the failed change.
      operationId: setDefaultMode
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: mode
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/SettableRobotSystemMode'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/mode-stream:
    get:
      tags:
        - Controller
      summary: Stream Mode Change
      description: |
        Receive updates of the current robot system mode of a robot controller via websocket upon robot system mode change.
        See [setDefaultMode](setDefaultMode) for more information about the different modes.
      operationId: streamModeChange
      x-serverstream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeChangeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/state:
    get:
      tags:
        - Controller
      summary: State of Device
      description: Get the current state of a robot controller.
      operationId: getCurrentRobotControllerState
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotControllerState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/state-stream:
    get:
      tags:
        - Controller
      summary: Stream State of Device
      description: Receive updates of the state of a robot controller.
      operationId: streamRobotControllerState
      x-serverstream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: response_rate
          in: query
          schema:
            type: integer
            format: uint32
            description: Update rate for the response message in ms. If not set 200ms are used.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotControllerState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/virtual-robot-configuration:
    get:
      tags:
        - Controller
      summary: Virtual Robot Configuration
      description: |
        Receive the configuration for a virtual robot controller.
        Used to configure a virtual robot controller via [addRobotController](addRobotController).

        > **NOTE**
        >
        > The output generated by this endpoint can be too large for the site to handle, and may produce an error or incorrect output.
        > Use `curl` in combination with `> output.json` to capture the output, or use an API client like Postman.
      operationId: getVirtualRobotConfiguration
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRobotConfiguration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/coordinate-systems:
    get:
      tags:
        - Coordinate Systems
      summary: List
      description: |
        Lists all specifications of coordinate systems from robot controllers.
        Use parameter orientation_type to get the orientation part of the transformation offset of the coordinate system returned in the requested orientation notation.
        If parameter orientation_type is not set, the orientation part of the transformation offset of the coordinate system is returned in rotation vector notation.

        The coordinate systems from the robot controller are loaded when the motion group associated with the coordinate system is activated.
        With deactivation of the motion group, the associated coordinate systems are removed from NOVA. The unique identifier of the coordinate systems from the robot controllers
        are suffixed with "On" + the unique identifier of the robot controller.
      operationId: listCoordinateSystems
      parameters:
        - $ref: '#/components/parameters/Cell'
        - name: orientation_type
          in: query
          schema:
            $ref: '#/components/schemas/OrientationType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/coordinate-systems/{coordinate-system}:
    get:
      tags:
        - Coordinate Systems
      summary: Description
      description: |
        Request a coordinate system specification for a given identifier.
        Use parameter orientation_type to get the orientation part of the transformation offset of the coordinate system returned in the requested orientation notation.
        If parameter orientation_type is not set, the orientation part of the transformation offset of the coordinate system is returned in rotation vector notation.

        The coordinate systems from the robot controller are loaded when the motion group associated with the coordinate system is activated.
        With deactivation of the motion group, the associated coordinate systems are removed from NOVA. The unique identifier of the coordinate systems from the robot controllers
        are suffixed with "On" + the unique identifier of the robot controller.
      operationId: getCoordinateSystem
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/CoordinateSystem'
        - name: orientation_type
          in: query
          schema:
            $ref: '#/components/schemas/OrientationType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordinateSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/coordinate-systems/{coordinate-system}/transform:
    post:
      tags:
        - Coordinate Systems
      summary: Transform
      description: Transform a pose to another base.
      operationId: transformInCoordinateSystem
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/CoordinateSystem'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoseInCoordinateSystem'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoseInCoordinateSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/motion-groups:
    get:
      tags:
        - Motion Group
      summary: List Active
      description: |
        List all active motion groups. A motion group is active if it is currently
        used by a controller.
      operationId: listMotionGroups
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupsList'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - Motion Group
      summary: Activate
      description: |
        Activate the motion group and keeps the motion group in an active status.
        To manually activate a motion group, use this endpoint.

        When activating a motion group, interacting with the controller in other ways is not possible.

        To deactivate a motion group, use [deactivateMotionGroup](deactivateMotionGroup).
      operationId: activateMotionGroup
      parameters:
        - $ref: '#/components/parameters/Cell'
        - name: motion_group
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/all:
    post:
      tags:
        - Motion Group
      summary: Activate All
      description: |
        Activate the motion group and keeps the motion group in an active status.
        To activate all motion groups of a robot controller, use this endpoint. It will return all activated motion groups
        of that controller.

        When activating motion groups, it is not possible to interact with the controller in any other way.

        To deactivate a motion group, use [deactivateMotionGroup](deactivateMotionGroup).
      operationId: activateAllMotionGroups
      parameters:
        - $ref: '#/components/parameters/Cell'
        - name: controller
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupsList'
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/motion-groups/{motion-group}:
    delete:
      tags:
        - Motion Group
      summary: Deactivate
      description: |
        Deactivate a motion group. Activate the motion group and keeps the motion group in an active status.

        The robot controller streams information about all active motion groups. Deactivate motion groups that you no longer use.

        When deactivating motion groups, it is not possible to interact with the controller in any other way.
      operationId: deactivateMotionGroup
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/info-capabilities:
    get:
      tags:
        - Motion Group Info
      summary: Capabilities
      description: |
        Lists options the motion group offers in regard to the information service.

        Some motion groups may not provide all information services, e.g. some manufacturers don't have a blending zone concept.
      operationId: getInfoCapabilities
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoServiceCapabilities'
  /cells/{cell}/motion-groups/{motion-group}/kinematic-capabilities:
    get:
      tags:
        - Motion Group Kinematics
      summary: Capabilities
      description: |
        Get the kinematic endpoints provided for the specified motion-group.
      operationId: getKinematicCapabilities
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KinematicServiceCapabilities'
  /cells/{cell}/motion-groups/{motion-group}/kinematic/calculate-all-joint-positions:
    post:
      tags:
        - Motion Group Kinematics
      summary: All Joint Positions from TCP Pose
      description: |
        Calculate the joint positions of a motion group in order to move its TCP to a specific pose (Inverse Kinematic Solutions).
        All solutions are within the configured joint limits of the robot and not in a singular position of the robot.

        Return all joint positions as list of distinct joint positions in [rad] with
        their respective inverse feedback.

        Will be empty when unreachable, e.g. outside joint position limits, singular.

        Does not include multiple solutions where the robot links are in the same postition.
        Those can occur when single joints are allowed to move in a range larger than 360 degrees.
      operationId: calculateAllInverseKinematic
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllJointPositionsRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllJointPositionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/kinematic/calculate-joint-position:
    post:
      tags:
        - Motion Group Kinematics
      summary: Nearest Joint Position from TCP Pose
      description: |
        Calculate the joint positions the motion-group needs to apply for its TCP to be in a specified pose (Inverse Kinematic Solution).

        If multiple solutions are found, the one nearest to the given specified joint position is picked.
        * For all supported robot models, except the Fanuc CRX line, the returned joint position is guaranteed to have the same configuration
        (often referred to as ELBOW_UP, WRIST_DOWN, SHOULDER_RIGHT, f.e.) as the specified reference joint position.
        If the position limit of any single joint allows it to be in a range larger than 2 PI,
        the respective joint value in the result will be as close as possible to its reference value.
        * For the Fanuc CRX line the solution is selected to have the smallest distance measured by the norm of its difference to the reference joint position.

        The returned joint position is guaranteed to be within the joint limits and not in a singular position of the robot.
      operationId: calculateInverseKinematic
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JointPositionRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joints'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/kinematic/calculate-tcp-pose:
    post:
      tags:
        - Motion Group Kinematics
      summary: TCP Pose from Joint Position
      description: |
        Calculates the TCP pose from a joint position sample using the forward kinematics of the motion-group.
      operationId: calculateForwardKinematic
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TcpPoseRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoseInCoordinateSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/mounting:
    get:
      tags:
        - Motion Group Info
      summary: Device Mounting
      description: |
        Returns the configured mounting pose offset in relation to world coordinate system and the motion group's coordinate system.
      operationId: getMounting
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mounting'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/capability/jogging:
    get:
      tags:
        - Motion Group Info
      summary: Jogging Capabilities
      description: |
        Lists options the motion group offers in regard to jogging.

        Some motion groups may not provide all information services, e.g. it is physically not possible to move a one-axis-turntable in a linear way.
      operationId: getJoggingCapabilities
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoggingServiceCapabilities'
  /cells/{cell}/motion-groups/{motion-group}/optimizer-setup:
    get:
      tags:
        - Motion Group Info
      summary: Optimizer Configuration
      description: |
        <!-- theme: danger -->

        > **Experimental**

        Get the complete configuration which can be passed to the planner-optimizer
        (incl. motion group description, limits etc.)
      operationId: getOptimizerConfiguration
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
        - name: tcp
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptimizerSetup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/payloads:
    get:
      tags:
        - Motion Group Info
      summary: List Payloads
      description: |
        Lists all defined payloads of the motion group.
        The payload is defined as the sum of all weights attached to the
        flange/endpoint of the motion group, e.g. sum of the tools and workpiece weight that are currently attached.
      operationId: listPayloads
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPayloadsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/payloads/current:
    get:
      tags:
        - Motion Group Info
      summary: Selected Payload
      description: |
        Gets the currently selected payload of the motion group.
        The payload is defined as the sum of all weights attached to the
        flange/endpoint of the motion group, e.g. sum of the tools and workpiece weight that are currently attached.
      operationId: getActivePayload
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payload'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/safety-setup:
    get:
      tags:
        - Motion Group Info
      summary: Safety Setup and Limitations
      description: |
        Get the safety setup and limitations of a connected motion group.

        Safety settings are configured per robot controller and are
        valid for all connected motion groups.
      operationId: getSafetySetup
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafetySetup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/specification:
    get:
      tags:
        - Motion Group Info
      summary: Get Static Properties
      description: |
        Get static properties of the motion group.
        Those properties are used internally for motion group plannning.
        Only supported motion groups will return a valid response.
      operationId: getMotionGroupSpecification
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/state:
    get:
      tags:
        - Motion Group Info
      summary: State of Device
      description: |
        Returns the current state of the selected motion group including the current joint position, velocity, pose, and more.
      operationId: getCurrentMotionGroupState
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
        - name: response_coordinate_system
          in: query
          schema:
            type: string
          description: |
            Unique identifier addressing a coordinate system to which the responses should be converted.
            If not set, world coordinate system is used.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/state-stream:
    get:
      tags:
        - Motion Group Info
      summary: Stream State of Device
      description: |
        Receive updates of the motion group state.
        The stream will be closed from the server if the controller is disconnected.
      operationId: streamMotionGroupState
      x-serverstream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
        - $ref: '#/components/parameters/ResponseRate'
        - $ref: '#/components/parameters/ResponseCoordinateSystem'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/tcps:
    get:
      tags:
        - Motion Group Info
      summary: List TCPs
      description: |
        Get all internal configured TCPs of a connected device.

        Use parameter orientation_type to get the orientation part of the transformation offset returned in the requested orientation notation.
        If parameter orientation_type is not set, the orientation part of the transformation offset is returned in rotation vector notation.
        If use_controller_orientation is set to true the orientation type used on the robot controller is used and the may specified orientation_type is ignored.
        This can be useful for visualization purposes in the client application due to equivalent numbers with robot control panel visualization.
      operationId: listTcps
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
        - name: orientation_type
          in: query
          schema:
            $ref: '#/components/schemas/OrientationType'
        - name: use_controller_orientation
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTcpsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-groups/{motion-group}/tcps/current:
    get:
      tags:
        - Motion Group Info
      summary: Selected TCP
      description: |
        Get the internal selected TCP of a connected device.

        Use parameter orientation_type to get the orientation part of the transformation offset returned in the requested orientation notation.
        If parameter orientation_type is not set, the orientation part of the transformation offset is returned in rotation vector notation.
        If use_controller_orientation is set to true the orientation type used on the robot controller is used and the may specified orientation_type is ignored.
        This can be useful for visualization purposes in the client application due to equivalent numbers with robot control panel visualization.
      operationId: getActiveTcp
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroup'
        - name: orientation_type
          in: query
          schema:
            $ref: '#/components/schemas/OrientationType'
        - name: use_controller_orientation
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotTcp'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/motion-planning/plan-trajectory:
    post:
      tags:
        - Trajectory Planning
      operationId: planTrajectory
      summary: Plan Trajectory
      description: |-
        Plans a new trajectory for a single motion group.

        Describe the trajectory as a sequence of motion commands that the robots TCP should follow.

        Use the following workflow to execute a planned trajectory:
        1. Plan a trajectory.
        2. Validate the planned trajectory and load it into the cache using the [addTrajectory](addTrajectory) endpoint.
        3. Execute the cached trajectory using the [executeTrajectory](executeTrajectory) endpoint.

        If the trajectory is not executable, the [PlanTrajectoryResponse](PlanTrajectoryResponse)
        will contain the joint trajectory up until the error, e.g. all samples until a collision occurs.
        EXCEPTION: If a CartesianPTP or JointPTP motion command has an invalid target,
        the response will contain the trajectory up until the start of the invalid PTP motion.
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanTrajectoryRequest'
            examples:
              UR5e_Line:
                $ref: '#/components/examples/PlanTrajectoryRequest_UR5e_Line'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanTrajectoryResponse'
        '404':
          description: Not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
  /cells/{cell}/kinematic/inverse-kinematics:
    post:
      tags:
        - Inverse kinematics
      operationId: inverseKinematics
      summary: Inverse kinematics
      description: |
        Returns the reachable joint positions for a list of given poses.
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InverseKinematicsRequest'
            examples:
              UR5e_Line:
                $ref: '#/components/examples/InverseKinematicsRequest_UR5e'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InverseKinematicsResponse'
        '404':
          description: Not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
  /cells/{cell}/motion-planning/motion-group-models:
    get:
      tags:
        - Trajectory Planning
      summary: Motion Group Models for Planning
      operationId: getPlanningMotionGroupModels
      description: |
        Returns motion group models that are supported for planning.
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Not found
          content: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
  /cells/{cell}/trajectories:
    post:
      tags:
        - Trajectory Execution
      summary: Add Trajectory
      description: |
        Loads and validates the data of a trajectory into the execution cache, rendering the trajectory executable.
        The response contains the result of the validation of the trajectory.

        Validation can lead to three different results:
        - Fully valid: The whole trajectory can be executed from start to end. The response will contain an unique identifier which is used to move the robot.
        - Partially valid: Only parts of the trajectory can be executed. The response will contain an unique identifier to move the robot
          and information about the failure for the part that is not executable.
        - Invalid: The trajectory can not be executed. The response will tell you the reason of failure.

        If the trajectory is at least partially valid, the parts of the trajectory that are valid can be executed using the [executeTrajectory](executeTrajectory) endpoint.

        The workflow is as follows:
          - Generate a trajectory with [planTrajectory](planTrajectory) or your own motion planner,
          - Send the trajectory to this endpoint to validate it and get a unique identifier for it,
          - The unique identifier will appear in the list of available trajectories, see [listTrajectories](listTrajectories) endpoint, if it is at least partially executable.
          - Move motion group to trajectory using the [executeToTrajectory](executeToTrajectory) endpoint.
          - Execute your trajectory using the [executeTrajectory](executeTrajectory) endpoint.
      operationId: addTrajectory
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTrajectoryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTrajectoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - Trajectory Execution
      summary: List Trajectories
      description: |
        List currently cached trajectories.
        Use [addTrajectory](addTrajectory) to add a new trajectory. Adding trajectories is necessary to execute them.
        Trajectories are removed if the corresponding motion group or controller disconnects.
      operationId: listTrajectories
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTrajectoriesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - Trajectory Execution
      summary: Clear Trajectories
      description: Clear the trajectory cache.
      operationId: clearTrajectories
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/trajectories/{trajectory}:
    delete:
      tags:
        - Trajectory Execution
      summary: Delete Trajectory
      description: |
        Delete a previously created trajectory from cache. Use [listTrajectories](listTrajectories) to list all cached trajectories.
        Trajectories are removed automatically if the motion group or the corresponding controller is disconnected.
      operationId: deleteTrajectory
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Trajectory'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/trajectories/{trajectory}/execution/to-trajectory:
    get:
      tags:
        - Trajectory Execution
      summary: Move to Trajectory
      description: |
        Request to move the motion group via joint point-to-point to a given location on a trajectory.

        To start moving along a trajectory from an arbitrary location, the current joint positions must match the joint positions of the trajectory at the given location.

        > **Note:** To abort the movement, the connection needs to be closed.
      operationId: executeToTrajectory
      x-serverstream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Trajectory'
        - name: location_on_trajectory
          in: query
          schema:
            type: number
            format: double
            description: |
              Target location the robot should move to via joint point-to-point.
              The location is a scalar value that defines a position along a path, typically ranging from 0 to `n`,
              where `n` denotes the number of motion commands. Each integer value of the location corresponds to a specific motion command,
              while non-integer values interpolate positions within the segments.
              The location is calculated from the joint path.
          required: true
        - name: override_joint_velocity_limits
          in: query
          schema:
            type: array
            items:
              type: number
              format: double
          description: The joint velocity limits for the p2p movement to a previously added trajectory.
        - name: override_joint_acceleration_limits
          in: query
          schema:
            type: array
            items:
              type: number
              format: double
          description: The joint acceleration limits for the p2p movement to a previously added trajectory.
        - name: override_tcp_velocity_limit
          in: query
          schema:
            type: number
            format: double
          description: Maximum allowed TCP velocity in [mm/s].
        - name: override_tcp_acceleration_limit
          in: query
          schema:
            type: number
            format: double
          description: Maximum allowed TCP acceleration in [mm/s^2].
        - name: override_tcp_orientation_velocity_limit
          in: query
          schema:
            type: number
            format: double
          description: Maximum allowed TCP rotation velocity in [rad/s].
        - name: override_tcp_orientation_acceleration_limit
          in: query
          schema:
            type: number
            format: double
          description: Maximum allowed TCP rotation acceleration in [rad/s^2].
        - name: responses_coordinate_system
          in: query
          schema:
            type: string
            description: |
              Unique identifier of a coordinate system to which the responses should be converted to. Default is the world coordinate system.
              Default coordinate system is world.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveToTrajectoryViaJointPTPResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/execution/trajectory:
    get:
      tags:
        - Trajectory Execution
      summary: Execute Trajectory
      description: |
        <!-- theme: danger -->

        > Websocket endpoint

        Provides execution control over a previously planned trajectory. Enables the caller to attach input/output actions to the trajectory.

        Understanding the concept of location:
          The location or path parameter specifies the exact position along a trajectory.
          The location is a scalar value that ranges from 0 to `n`,
          where `n` denotes the number of motion commands, or trajectory segments, e.g. line, p2p, etc. See [planMotion](planMotion).
          Each integer value of the location corresponds to one motion command, e.g. 3.0 to 3.999 could be a line.

        ### Preconditions

        - The motion group's control mode is not claimed by any other endpoint.
        - The motion group's joint position are at start location specified with InitializeMovementRequest.
        - Use [executeToTrajectory](executeToTrajectory) to move the robot to the start location.

        ### Requests

        #### 1. Send InitializeMovementRequest to lock the trajectory to this connection
          The following actions are executed:
          - Sets robot controller mode to control mode,
          - Sets start location of the execution

          Keep in mind that only a single trajectory can be locked to a websocket connection at a time and not unlocked anymore.
          To execute another trajectory, a new connection must be established.

        #### 2. Send StartMovementRequest to start the movement

        Sets direction of movement, default is forward.

        #### **Optional**

        - To pause, send PauseMovementRequest before the movement has reached its end location.
        - Change the movement's velocity with PlaybackSpeedRequest after initializing the movement with InitializeMovementRequest.

        ### Responses

        - InitializeMovementResponse is sent to signal the success or failure of the InitializeMovementRequest.
        - Movement responses are streamed after a StartMovementRequest successfully started the movement.
          Movement responses are streamed in a rate that is defined as the multiple of the controller step-rate closest to
          but not exceeding the rate configured by InitializeMovementRequest.
        - Standstill reponse  is sent once the movement has finished or has come to a standstill due to a pause.
        - PauseMovementResponse is sent to signal the success of the PauseMovementRequest. It does not signal the end of the movement.
          End of movement is signaled by Standstill reponse .
        - PlaybackSpeedResponse is sent to signal the success of the PlaybackSpeedRequest.
        - MovementError with error details is sent in case of an unexpected error, e.g. controller disconnects during movement.

        ### Tips and Tricks

        - A movement can be paused and resumed by sending PauseMovementRequest and StartMovementRequest.
        - Send PlaybackSpeedRequest before StartMovementRequest to reduce the velocity of the movement before it starts.
        - Send PlaybackSpeedRequest repeatedly to implement a slider. The velocity of the motion group can be adjusted with each controller step.
        Therefore, if your app needs a slider-like UI to alter the velocity of a currently running movement,
        you can send PlaybackSpeedRequest with different speed values repeatedly during the movement.
        - A closed trajectory (end and start joint position are equal) can be repeated by sending StartMovementRequest after the movement has finished.
      operationId: executeTrajectory
      x-bidistream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/InitializeMovementRequest'
                - $ref: '#/components/schemas/StartMovementRequest'
                - $ref: '#/components/schemas/PauseMovementRequest'
                - $ref: '#/components/schemas/PlaybackSpeedRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteTrajectoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/execution/jogging:
    get:
      tags:
        - Jogging
      summary: Execute Jogging
      description: |
        <!-- theme: danger -->

        > Websocket endpoint

        Provides execution control over a dynamically adaptable jogging motion for a motion group.

        Jogging describes controlling a motion group by sending real-time commands to move either its joints or the TCP (Tool Center Point).
        The commands contain target velocities that may change at any time during execution, so the resulting motion cannot be computed upfront.

        ### Preconditions

        The motion group is not moved by any other endpoint.

        ### Requests

        #### 1. Send InitializeJoggingRequest to configure the jogging.

        Sets robot controller mode to control mode.
        Sets rate and coordinate system for the jogging response.

        #### 2. Send JointVelocityRequest or TcpVelocityRequest to start the jogging motion.

        #### 3. Change or stop the jogging motion

        - Change the jogging direction and/or velocity during the jogging motion with JointVelocityRequest or TcpVelocityRequest.
        - To stop the jogging motion, send zero velocities via either request.

        ### Responses

        - InitializeJoggingResponse is sent to signal the success or failure of the InitializeJoggingRequest.
        - Jogging responses are streamed continuously after an InitializeJoggingRequest is processed.
          Jogging responses contain the robot controller state and the state of the jogging control.
        - JoggingErrorResponse with error details is sent in case of an unexpected error, e.g., controller disconnects during jogging.

        ### Tips and Tricks

        - In the JoggingResponse, verify that the robot control is in the desired state, e.g. standstill, with JoggingState.
        - Ensure that the websocket connection remains open until the jogging motion is stopped to avoid unexpected stops.
      operationId: executeJogging
      x-bidistream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/InitializeJoggingRequest'
                - $ref: '#/components/schemas/JointVelocityRequest'
                - $ref: '#/components/schemas/TcpVelocityRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteJoggingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/programs/runs:
    get:
      tags:
        - Program
      summary: List programs
      description: Get details about all existing runs
      operationId: getProgramRuns
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProgramRunReference'
                type: array
                title: Response of program runs
        '500':
          description: Internal server error
    post:
      tags:
        - Program
      summary: Create program run
      description: |
        This endpoint accepts a program and if desired, initial arguments (in the form of a dict).

        The program will be executed asynchronously.

        It returns a program run reference which can be used to query the state of the program run.

        ## Receiving state updates
        Receive state updates of the program run via polling the
        `/programs/runs/{run_id}/`

        ### Via polling
        You can receive updates about the state of the program run by polling the `/programs/runs/{run_id}/` endpoint.
      operationId: createProgramRun
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramRunReference'
        '400':
          description: Either a syntax or a runtime error
        '404':
          description: Not found
        '406':
          description: A program run is already running
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError-2'
        '452':
          description: |
            Robot is not able to perform the motion due to hard or soft restrictions.
            This can be due to a variety of reasons:

            - The robot is too close to a singularity,
            - The robot is too close to a joint limit,
            - Robot operating mode could not be set to the desired mode,
            - An operating mode change occurred during the motion.

            In the case of an error, the full error will be returned in the response body.
        '500':
          description: Internal server error
  /cells/{cell}/programs/runs/stop:
    post:
      tags:
        - Program
      summary: Stop all programs
      description: Stop all runs
      operationId: stopAllPrograms
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '204':
          description: Successful Response. The program is valid.
        '500':
          description: Internal server error
  /cells/{cell}/programs/runs/{run}:
    get:
      tags:
        - Program
      summary: Get program run
      description: |
        Returns information about a program currently executed.
        When a program is finished: Program response, result, collected logs, ..
        When a program is running: Running status, current executed line, ...
      operationId: getProgramRun
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/ProgramRunId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramRun'
        '404':
          description: Not found
        '500':
          description: Internal server error
  /cells/{cell}/programs/runs/{run}/stop:
    post:
      tags:
        - Program
      summary: Stop program run
      description: Stop a specific program run.
      operationId: stopProgramRun
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/ProgramRunId'
      responses:
        '204':
          description: Successful Response. Will also be returned if the run is not running.
        '404':
          description: Not found
        '500':
          description: Internal server error
  /cells/{cell}/programs/execute:
    post:
      tags:
        - Program
      summary: Execute program
      description: |
        Execute a program synchronously.

        The execute operation will be started from the current joint configuration
        of any addressed robot(s).

        Addressed robots have to be in control mode for the execute operation to
        succeed.

        A request to this endpoint will block this endpoint until the program has
        been executed, or until an error occurs.

        The executed movement is returned in case of a successful execution.

        Otherwise an error (e.g. out of reach, singularity), is returned.
      operationId: executeProgram
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramRun'
        '400':
          description: Either a syntax or a runtime error
        '404':
          description: Not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError-2'
        '452':
          description: |
            Robot is not able to perform the motion due to hard or soft restrictions.
            This can be due to a variety of reasons:

            - The robot is too close to a singularity,
            - The robot is too close to a joint limit,
            - Robot operating mode could not be set to the desired mode,
            - An operating mode change occurred during the motion.

            In the case of an error, the full error will be returned in the response body.
        '500':
          description: Internal server error
  /cells/{cell}/programs/simulate:
    post:
      tags:
        - Program
      summary: Simulate program
      description: Simulate a program given as text/plain
      operationId: simulateProgram
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramRun'
        '400':
          description: Either a syntax or a runtime error
        '404':
          description: Not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError-2'
        '452':
          description: |
            Robot is not able to perform the motion due to hard or soft restrictions.
            This can be due to a variety of reasons:

            - The robot is too close to a singularity,
            - The robot is too close to a joint limit,
            - Robot operating mode could not be set to the desired mode,
            - An operating mode change occurred during the motion.

            In the case of an error, the full error will be returned in the response body.
        '500':
          description: Internal server error
  /cells/{cell}/programs/validate:
    post:
      tags:
        - Program
      summary: Validate program
      description: Validate a program
      operationId: validateProgram
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramRequest'
        required: true
      responses:
        '204':
          description: Successful Response. The program is valid.
        '400':
          description: Either a syntax or a runtime error
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError-2'
        '500':
          description: Internal server error
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups:
    get:
      tags:
        - Virtual Robot
      summary: Motion Group Description
      description: |
        Gets information on the motion group.
      operationId: getMotionGroups
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupInfos'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/ios:
    get:
      tags:
        - Virtual Robot
      summary: Get Inputs/Outputs
      description: |
        Retrieves the current values of inputs/outputs of the virtual controller.

        The identifiers of inputs/outputs must be provided in the request.
        Request all available input/output identifiers via [listVirtualRobotIODescriptions](listVirtualRobotIODescriptions).
      operationId: listIOs
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: ios
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
            description: |
              Array of input/output identifiers to retrieve the values for.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIOValuesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Virtual Robot
      summary: Set Input/Ouput Values
      description: |
        Sets a list of values of a virtual controller inputs/outputs.
      operationId: setIOValues
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/IOBooleanValue'
                  - $ref: '#/components/schemas/IOIntegerValue'
                  - $ref: '#/components/schemas/IOFloatValue'
              example:
                - io: io1
                  boolean_value: true
                  value_type: boolean
                - io: io2
                  integer_value: '42'
                  value_type: integer
                - io: io3
                  float_value: 3.14
                  value_type: float
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /cells/{cell}/controllers/{controller}/teach-pendant/ios/description:
    get:
      tags:
        - Virtual Robot
      summary: List Input/Output Descriptions
      description: |
        Lists the input/output descriptions of the virtual robot controller.

        The input/output descriptions contain information like name, type and unit.
        Available inputs/outputs are defined by the virtual robot controller.
        Each input/output has a unique identifier. If no identifiers are specified in the request, all available inputs/outputs are retrieved by this endpoint.
        Exception: When a filter (e.g., direction, value_type, group) is applied, only matching inputs/outputs are returned.
      operationId: listVirtualRobotIODescriptions
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: ios
          in: query
          schema:
            type: array
            description: |
              Array of input/output identifiers to retrieve the descriptions for.
              If empty or not provided, descriptions of all available inputs/outputs for the requested robot controller will be returned.
            items:
              type: string
        - name: direction
          in: query
          schema:
            $ref: '#/components/schemas/IODirection'
          description: |
            Return only inputs/outputs with the specified direction.
        - name: value_type
          in: query
          schema:
            $ref: '#/components/schemas/IOValueType'
          description: |
            Return only inputs/outputs with the specified value type.
        - name: group
          in: query
          schema:
            type: string
          description: |
            Return only inputs/outputs from the specified group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIODescriptionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups/{motion-group}:
    get:
      tags:
        - Virtual Robot
      summary: Get Motion Group State
      description: |
        Get the current motion group state which provides values for the joints' position, velocity and acceleration.
      operationId: getMotionGroupState
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupJoints'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Virtual Robot
      summary: Set Motion Group State
      description: |
        Sets the values for joint position, joint velocity or joint acceleration of a motion group state. The values are immediately applied to the joints of the motion group.
        We recommend to only use the endpoint when the motion group is in monitor mode.
        In case the motion group is controlled, currently jogging or planning motions, the values are overridden by the controller or an error may occur.
      operationId: setMotionGroupState
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotionGroupJoints'
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/coordinate-systems:
    get:
      tags:
        - Virtual Robot Setup
      summary: List Coordinate Systems
      description: |
        Lists all coordinate systems on the robot controller.
      operationId: listVirtualRobotCoordinateSystems
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordinateSystems'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - Virtual Robot Setup
      summary: Add Coordinate Systems
      description: |
        Adds a coordinate system to the robot controller.
      operationId: addVirtualRobotCoordinateSystem
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoordinateSystem'
            example:
              coordinate_system: world
              name: CS-user
              position:
                - 0
                - 0
                - 0
              orientation:
                - 0
                - 0
                - 0
              orientation_type: ROTATION_VECTOR
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/coordinate-systems/{coordinate-system}:
    delete:
      tags:
        - Virtual Robot Setup
      summary: Remove Coordinate System
      description: |
        Deletes a coordinate system from the virtual controller. This will remove the coordinate system from the list of coordinate systems and remove
        all dependent coordinate systems which use the deleted coordinate system as reference.
      operationId: deleteVirtualRobotCoordinateSystem
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/CoordinateSystem'
        - name: delete_dependent
          in: query
          schema:
            type: boolean
            default: false
          description: If true, all dependent coordinate systems will be deleted as well.
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups/{motion-group}/mounting:
    get:
      tags:
        - Virtual Robot Setup
      summary: Get Mounting
      description: |
        Gets motion group mounting. The motion group is based on the origin of the returned coordinate system.
      operationId: getVirtualRobotMounting
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordinateSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Virtual Robot Setup
      summary: Set Mounting
      description: |
        Sets motion group mounting by specifying a coordinate system. The motion group will be based on the coordinate system's origin.
        The coordinate system defines a transformation offset. The transformation offset is defined by a unique identifier,
        a name for front end usage and an offset in another coordinate system referenced by the
        unique identifier of the reference coordinate system.
      operationId: setVirtualRobotMounting
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoordinateSystem'
            example:
              coordinate_system: world
              name: mounting
              position:
                - 0
                - 0
                - 0
              orientation:
                - 0
                - 0
                - 0
              orientation_type: ROTATION_VECTOR
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordinateSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups/{motion-group}/tcps:
    get:
      tags:
        - Virtual Robot Setup
      summary: List TCPs
      description: |
        Lists TCPs of the motion group. An empty TCP list is valid, for example for external axes.
      operationId: listVirtualRobotTcps
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotTcps'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Virtual Robot Setup
      summary: Add TCP
      description: |
        Adds a new TCP or updates an existing TCP in the motion group.

        The position and rotation values in the request body are defined within the flangeâ€™s coordinate system.

        > **NOTE**
        >
        > Ensure the TCP's position is within the robot's reach. Refer to the robotâ€™s documentation or data sheet for details like joint limits or reach.
      operationId: addVirtualRobotTcp
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotTcp'
            example:
              id: TCP
              readable_name: Tool Center Point
              position:
                - 0
                - 0
                - 0
              orientation:
                - 0
                - 0
                - 0
              orientation_type: ROTATION_VECTOR
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups/{motion-group}/tcps/{tcp}:
    delete:
      tags:
        - Virtual Robot Setup
      summary: Remove TCP
      description: |
        Removes the TCP from the motion group. An unknown TCP is a valid input.
      operationId: deleteVirtualRobotTcp
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
        - $ref: '#/components/parameters/Tcp'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/controllers/{controller}/teach-pendant/emergency-stop:
    get:
      tags:
        - Virtual Robot Mode
      summary: Get Emergency Stop State
      description: |
        Requests the Emergency Stop state of the virtual robot controller.

        Use [getCurrentMotionGroupState](getCurrentMotionGroupState) to get the Emergency Stop state regardless of the controller type.
        There the Emergency Stop state is visible as the `safety_state`.

        > **NOTE**
        >
        > The Emergency Stop state can only be changed when using virtual robot controllers.
      operationId: getEmergencyStop
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - Virtual Robot Mode
      summary: Push or Release Emergency Stop
      description: |
        Activates or releases the Emergency Stop on the virtual robot controller.

        Activating the Emergency Stop stops the execution of all motions.
        The stop is executed on physical controllers immediately not gracefully and not on paths.
        Due to restricted physical behavior of the virtual robot controller, the Emergency Stop is executed on paths.
        To return to normal operation the Emergency Stop needs to be released.

        Use [getCurrentMotionGroupState](getCurrentMotionGroupState) to get the Emergency Stop state regardless of the controller type.
        There the Emergency Stop state is visible as the `safety_state`.

        > **NOTE**
        >
        > The Emergency Stop state can only be changed via API when using virtual robot controllers.
      operationId: setEmergencyStop
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/controllers/{controller}/teach-pendant/operationmode:
    get:
      tags:
        - Virtual Robot Mode
      summary: Get Operation Mode
      description: |
        Requests the Operation Mode of the virtual robot controller.

        To get the Operation Mode regardless of the controller type use [getCurrentMotionGroupState](getCurrentMotionGroupState).

        **Note:**
        The Operating Mode can only change be changed via API when using virtual robot controllers.
      operationId: getOperationMode
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpMode'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - Virtual Robot Mode
      summary: Set Operation Mode
      description: |
        Changes the Operation Mode of the virtual robot controller to the specified value.

        To get the Operation Mode regardless of the controller type use [getCurrentMotionGroupState](getCurrentMotionGroupState).

        > **NOTE**
        >
        > The Operating Mode can only change be changed via API when using virtual robot controllers.
      operationId: setOperationMode
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - name: mode
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/OperationMode'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/controllers/{controller}/teach-pendant/cycle-time:
    get:
      tags:
        - Virtual Robot Mode
      summary: Cycle Time
      description: |
        Get the cycle time of controller communication in [ms].
      operationId: getCycleTime
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CycleTime'
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups/{motion-group}/behavior:
    get:
      tags:
        - Virtual Robot Behavior
      summary: Behavior
      description: |
        Get the current robot motion group behavior - please see the setter [setMotionGroupBehavior](setMotionGroupBehavior) and the enum for
        details.
      operationId: getMotionGroupBehavior
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupBehaviorGetter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Virtual Robot Behavior
      summary: Switch Behavior
      description: |
        Switch robot motion group behavior.
      operationId: setMotionGroupBehavior
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
        - $ref: '#/components/parameters/MotionGroup'
        - name: behavior
          in: query
          schema:
            $ref: '#/components/schemas/Behavior'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/BadRequest'
  /cells/{cell}/controllers/{controller}/teach-pendant/motion-groups/external-joints-stream:
    get:
      tags:
        - Virtual Robot Behavior
      summary: Stream Joint Configuration
      description: |
        This stream provides the commanded joint state
        and sets a motion groups joint configuration, e.g. to move a motion group.
        The concept is that an application is using the Motion Service to move a motion group.
        The Motion Service is commanding the desired joint
        configuration of a motion group.

        Physical motion groups move to this joint configuration.

        With physical motion groups, this takes some time and only works if
        possible.

        And you have the *actual* joint state - the current real motion group
        configuration.

        Again, this stream is providing *commanded* joint state!
        It is __not__ providing the *actual* joint state!
        (Please file a request - if you need a stream of the *actual* joint state)

        When the virtual controller receives joint commands the joint configuration is immediately adapted to match the incoming joint configurations.
        CAUTION: Incoming joint configurations are not visualized and their velocity limits are not checked.
        we don't even check limits!

        Possible use cases are:
        1. Creating a robotic application that dynamically adapts to the configured joints on the robot controller, using this stream to feed
        new joint configurations back to the motion group.

        The stream only sends data to the robot controller if a motion is executed.

        If the robot controller's joint configuration differs too much from the incoming joint configuration, a following error occurs.
        Joint configurations that result in following errors are executed only for motions with a low velocity.

        2. Mimic Freedrive motions.

        <!-- theme: danger -->

        > **DANGER**
        >
        > If the incoming joint configuration is set to maximum velocity, the movement to reach this incoming joint configuration
        > will be executed with maximum speed regardless of safety zones and mechanical limits.
      operationId: externalJointsStream
      x-bidistream: true
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Controller'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalJointStreamDatapoint'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotionGroupJoints'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/store/objects:
    get:
      tags:
        - Store Object
      summary: List all Object Keys
      description: |
        List the keys for all objects.
      operationId: listAllObjectKeys
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Key'
    delete:
      tags:
        - Store Object
      summary: Clear all Objects
      description: |
        Delete all objects.

        <!-- theme: danger -->
        > This will delete ALL your persistently stored data.
      operationId: clearAllObjects
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '204':
          description: Successful Response
  /cells/{cell}/store/objects/{key}:
    head:
      tags:
        - Store Object
      summary: Get Object Metadata
      description: |
        Get object metadata.

        Objects can be large. Therefore this request only returns metadata without fetching the object's content.
      operationId: getObjectMetadata
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Key'
      responses:
        '200':
          description: Successful Response
          headers:
            Content-Type:
              $ref: '#/components/headers/Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
            X-Metadata:
              $ref: '#/components/headers/Metadata'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - Store Object
      summary: Get Object
      description: |
        Get the object.

        This request returns the object and any metadata attached to it.
      operationId: getObject
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Key'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BinaryObject'
          headers:
            Content-Type:
              $ref: '#/components/headers/Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
            X-Metadata:
              $ref: '#/components/headers/Metadata'
          description: Successful Response
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Store Object
      summary: Store Object
      description: |
        Store any data as an object.

        Using a key which already contains an object will override the previously stored object.
        Use [getObjectMetadata](getObjectMetadata) to verify that the key does not contain objects.

        Optional: Specify metadata as a dictionary with names and values.
      operationId: storeObject
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/MetadataHeader'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                any_value: {}
        required: true
      responses:
        '204':
          description: Successful Response
        '400':
          description: Failed to store object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Store Object
      summary: Delete Object
      description: |
        Delete an object

        <!-- theme: danger -->
        > This will delete persistently stored data.
      operationId: deleteObject
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          description: Successful Response
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/store/programs:
    get:
      tags:
        - Store Program
      summary: List all Programs
      description: |
        Returns a list of all the stored programs.
      operationId: listPrograms
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgramName'
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/store/programs/{program}:
    get:
      tags:
        - Store Program
      summary: Get Program
      description: |
        Returns the content of the program.
      operationId: getProgram
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Program'
      responses:
        '200':
          description: The content of the program.
          headers:
            X-Metadata:
              $ref: '#/components/headers/Metadata'
          content:
            text/*:
              schema:
                $ref: '#/components/schemas/ProgramContent'
              example: |
                tcp("Flange")
                move via p2p() to (0, 0, 0, 0, 0, 0)
                move frame("Flange") to (1, 2, 0)
                move via line() to (1, 1, 0)
                a := planned_pose()
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Store Program
      summary: Store Program
      description: |
        Stores the content of the program.
        If the program exists, the operation overwrites the content.
      operationId: storeProgram
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Program'
        - $ref: '#/components/parameters/MetadataHeader'
      requestBody:
        required: true
        content:
          text/*:
            schema:
              $ref: '#/components/schemas/ProgramContent'
      responses:
        '200':
          description: Successful Response
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Store Program
      summary: Delete Program
      description: |
        Deletes the program. This action is irreversible.
      operationId: deleteProgram
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Program'
      responses:
        '200':
          description: Successful Response
        '404':
          $ref: '#/components/responses/NotFound'
  /cells/{cell}/operator/programs/runs:
    post:
      tags:
        - Program Operator
      summary: Run Program from Library
      description: |
        <!-- theme: danger -->

        > **Experimental**

        This endpoint initiates the execution of a program stored in the program library.
        A program is started with the a specific program identifier that exists in the program library.
      operationId: createProgramOperatorRun
      x-openapi-router-controller: program_operator.api.program_run
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                program_id:
                  type: string
                  description: The identifier of the program stored in the program library.
              required:
                - program_id
      responses:
        '200':
          description: Successfully started the specified program.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: |
                      The identifier of the program run for further inspection of the
                      running program.
    get:
      tags:
        - Program Operator
      summary: Get All Program Runs
      description: |
        <!-- theme: danger -->

        > **Experimental**

        Retrieves all program runs, including past and current executions.
        Use the optional `state` parameter to filter the results by their status.
      operationId: getAllProgramOperatorRuns
      x-openapi-router-controller: program_operator.api.program_run
      parameters:
        - name: state
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: Successfully retrieved program runs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  program_runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/program_run_object'
  /cells/{cell}/operator/programs/runs/{run}:
    get:
      tags:
        - Program Operator
      summary: Get Program Run
      description: |
        <!-- theme: danger -->

        > **Experimental**

        Retrieves detailed information about a specific program run.
      operationId: getProgramOperatorRun
      x-openapi-router-controller: program_operator.api.program_run
      parameters:
        - name: run
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: Successfully retrieved program run details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program_run_object'
  /cells/{cell}/operator/triggers:
    post:
      tags:
        - Program Operator
      summary: Create Trigger
      description: |
        <!-- theme: danger -->
        > **Experimental**
        Creates a new trigger that automatically runs a program when certain conditions are met. Each trigger has a different configuration, and the configuration must be valid for the provided trigger type.
      operationId: createTrigger
      x-openapi-router-controller: program_operator.api.trigger
      parameters:
        - $ref: '#/components/parameters/Cell'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - program_id
                - type
                - enabled
              properties:
                program_id:
                  type: string
                  description: The identifier of the program to run when the trigger condition is met.
                enabled:
                  type: boolean
                  description: Indicated whether the trigger is enabled or not.
                type:
                  $ref: '#/components/schemas/trigger_type'
                config:
                  $ref: '#/components/schemas/OpcuaNodeValueTriggerConfig'
      responses:
        '200':
          description: Successfully created trigger.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The identifier of the created trigger.
    get:
      tags:
        - Program Operator
      summary: Get All Triggers
      operationId: getAllTriggers
      x-openapi-router-controller: program_operator.api.trigger
      parameters:
        - $ref: '#/components/parameters/Cell'
      description: |
        <!-- theme: danger -->
        > **Experimental**
        Returns all triggers in the system with the program runs caused by each trigger. You can use the program run identifier to get more details about a specific program run.
      responses:
        '200':
          description: Successfully retrieved list of triggers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  triggers:
                    type: array
                    items:
                      $ref: '#/components/schemas/trigger_object'
  /cells/{cell}/operator/triggers/{trigger}:
    get:
      tags:
        - Program Operator
      summary: Get Trigger
      operationId: getTrigger
      x-openapi-router-controller: program_operator.api.trigger
      description: |
        <!-- theme: danger -->
        > **Experimental**
        Retrieves detailed information about a specific trigger.
      parameters:
        - name: trigger
          in: path
          required: true
          description: The identifier of the trigger.
          schema:
            type: string
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: Successfully retrieved trigger details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trigger_object'
        '404':
          description: Trigger not found
    put:
      tags:
        - Program Operator
      summary: Update Trigger
      operationId: updateTrigger
      x-openapi-router-controller: program_operator.api.trigger
      description: |
        <!-- theme: danger -->
        > **Experimental**
        Updates the details of an existing trigger The exact behavior of switching a trigger from active to inactive or vice versa is not defined yet.
      parameters:
        - name: trigger
          in: path
          required: true
          description: The identifier of the trigger.
          schema:
            type: string
        - $ref: '#/components/parameters/Cell'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                program_id:
                  type: string
                  description: The identifier of the program to run when the trigger condition is met.
                enabled:
                  type: boolean
                  description: Whether the trigger is enabled or not.
                config:
                  $ref: '#/components/schemas/OpcuaNodeValueTriggerConfig'
      responses:
        '200':
          description: Successfully updated trigger.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trigger_object'
    delete:
      tags:
        - Program Operator
      summary: Delete Trigger
      operationId: deleteTrigger
      x-openapi-router-controller: program_operator.api.trigger
      description: |
        <!-- theme: danger -->
        > **Experimental**
        Delete an existing trigger.
      parameters:
        - name: trigger
          in: path
          required: true
          description: The identifier of the trigger.
          schema:
            type: string
        - $ref: '#/components/parameters/Cell'
      responses:
        '204':
          description: Trigger successfully deleted.
        '404':
          description: Trigger not found.
  /cells/{cell}/store/collision/colliders:
    get:
      tags:
        - Store Collision Components
      summary: List Colliders
      operationId: listStoredColliders
      description: |
        Returns a list of colliders in a scene.
        This excludes colliders that are part of a motion group.
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColliderDictionary'
  /cells/{cell}/store/collision/colliders/{collider}:
    get:
      tags:
        - Store Collision Components
      summary: Get Collider
      operationId: getStoredCollider
      description: |
        Returns the collider.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Collider'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collider'
        '404':
          description: Not found
          content: {}
    put:
      tags:
        - Store Collision Components
      summary: Store Collider
      operationId: storeCollider
      description: |
        Stores collider.

        If the collider does not exist, it will be created.
        If the collider exists, it will be updated.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Collider'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collider'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collider'
    delete:
      tags:
        - Store Collision Components
      summary: Delete Collider
      operationId: deleteStoredCollider
      description: |
        Deletes the stored collider.

        <!-- theme: danger -->
        > This will delete persistently stored data.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Collider'
      responses:
        '204':
          description: Deleted
          content: {}
  /cells/{cell}/store/collision/link-chains:
    get:
      tags:
        - Store Collision Components
      summary: List Link Chains
      operationId: listCollisionLinkChains
      description: |
        Returns the stored link chains.
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/LinkChain'
  /cells/{cell}/store/collision/link-chains/{link-chain}:
    get:
      tags:
        - Store Collision Components
      summary: Get Link Chain
      operationId: getStoredCollisionLinkChain
      description: |
        Returns the collision link chain.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/LinkChain'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkChain'
        '404':
          description: Not found
          content: {}
    put:
      tags:
        - Store Collision Components
      summary: Store Link Chain
      operationId: storeCollisionLinkChain
      description: |
        Stores link chain.

        If the link chain does not exist, it will be created.
        If the link chain exists, it will be updated.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/LinkChain'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkChain'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkChain'
    delete:
      tags:
        - Store Collision Components
      summary: Delete Link Chain
      operationId: deleteStoredCollisionLinkChain
      description: |
        Deletes the stored link chain.

        <!-- theme: danger -->
        > This will delete persistently stored data.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/LinkChain'
      responses:
        '204':
          description: Deleted
          content: {}
  /cells/{cell}/store/collision/default-link-chains/{motion-group-model}:
    get:
      tags:
        - Store Collision Components
      summary: Get Default Link Chain
      operationId: getDefaultLinkChain
      description: |
        Returns the default collision link chain for a given motion group model.

        See [getPlanningMotionGroupModels](getPlanningMotionGroupModels) for supported motion group models.

        The default link chain is derived from 3D models and optimized for collision detection within NOVA.

        The default link chain includes link shapes only. It does not include any attached components like wire feeders or sensors.

        Use the `stored_link_chain` or `link_chain` field in [storeCollisionScene](storeCollisionScene) to attach additional shapes to the link reference frames.
        Additional shapes may overlap each other per link and may also overlap the respective link's default shape.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/MotionGroupModelParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkChain'
        '404':
          description: Not found
          content: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
  /cells/{cell}/store/collision/tools:
    get:
      tags:
        - Store Collision Components
      summary: List Tools
      description: |
        Returns the list of stored tools.
      operationId: listStoredCollisionTools
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Tool'
  /cells/{cell}/store/collision/tools/{tool}:
    get:
      tags:
        - Store Collision Components
      operationId: getStoredCollisionTool
      summary: Get Tool
      description: |
        Returns the stored tool.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Tool'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        '404':
          description: Not found
          content: {}
    put:
      tags:
        - Store Collision Components
      operationId: storeCollisionTool
      summary: Store Tool
      description: |
        Stores the tool.

        If the tool does not exist, it will be created.
        If the tool exists, it will be updated.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Tool'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
    delete:
      tags:
        - Store Collision Components
      operationId: deleteStoredCollisionTool
      summary: Delete Tool
      description: |
        Deletes the stored tool.

        <!-- theme: danger -->
        > This will delete persistently stored data.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Tool'
      responses:
        '204':
          description: Deleted
          content: {}
  /cells/{cell}/store/collision/scenes:
    get:
      tags:
        - Store Collision Scenes
      summary: List Scenes
      operationId: listStoredCollisionScenes
      description: |
        Returns a list of stored scenes.
      parameters:
        - $ref: '#/components/parameters/Cell'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/CollisionScene'
  /cells/{cell}/store/collision/scenes/{scene}:
    get:
      tags:
        - Store Collision Scenes
      operationId: getStoredCollisionScene
      summary: Get Scene
      description: |
        Returns the stored scene.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Scene'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollisionScene'
        '404':
          description: Not Found
          content: {}
    put:
      tags:
        - Store Collision Scenes
      operationId: storeCollisionScene
      summary: Store Scene
      description: |
        Creates or replaces the stored collision scene.

        The scene is assembled from components as defined in the request body.

        <!-- theme: info -->
        > This endpoint allows indicating previously stored components.
        > Components used within the request will be copied into the new or updated scene.

        An error is returned if an indicated component does not exist.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Scene'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollisionSceneAssembly'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollisionScene'
        '404':
          description: Not found
          content: {}
    delete:
      tags:
        - Store Collision Scenes
      operationId: deleteStoredCollisionScene
      summary: Delete Scene
      description: |
        Deletes the stored scene.

        <!-- theme: danger -->
        > This will delete persistently stored data.
      parameters:
        - $ref: '#/components/parameters/Cell'
        - $ref: '#/components/parameters/Scene'
      responses:
        '204':
          description: Deleted
          content: {}
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    NameList:
      description: A list of names
      type: array
      items:
        type: string
    CellName:
      type: string
      description: |
        A unique name for the cell used as an identifier for addressing the cell in all API calls.
        It must be a valid k8s label name as defined by [RFC 1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names).
      pattern: ^[a-z][a-z0-9-]{0,30}[a-z0-9]$
      default: cell
    CellDescription:
      type: string
      maxLength: 200
      description: |
        A description of the cell.
    AbbController:
      title: Abb
      description: |
        The configuration of a physical ABB robot controller has to contain IP address.
        Additionally an EGM server configuration has to be specified in order to control the robot.
        Deploying the server is a functionality of this API.
      type: object
      required:
        - controller_ip
        - controller_port
        - egm_server
      properties:
        kind:
          type: string
          enum:
            - AbbController
          default: AbbController
          x-go-type-skip-optional-pointer: true
          x-is-discriminator: true
        controller_ip:
          type: string
        controller_port:
          description: |
            Default values: 80, 443. If custom value is set, field is required.
          type: integer
          default: 80
        egm_server:
          description: The EGM server runs inside of the cell, thus its IP must be in the same network as the 'controller_ip'
          type: object
          required:
            - ip
            - port
          properties:
            ip:
              type: string
            port:
              type: integer
              default: 32112
    FanucController:
      title: Fanuc
      description: The configuration of a physical FANUC robot controller has to contain IP address of the controller.
      type: object
      required:
        - controller_ip
      properties:
        kind:
          type: string
          enum:
            - FanucController
          default: FanucController
          x-go-type-skip-optional-pointer: true
          x-is-discriminator: true
        controller_ip:
          type: string
    KukaController:
      title: Kuka
      description: |
        The configuration of a physical KUKA robot controller has to contain an IP address.
        Additionally an RSI server configuration has to be specified in order to control the robot.
        Deploying the server is a functionality of this API.
      type: object
      required:
        - controller_ip
        - controller_port
        - rsi_server
      properties:
        kind:
          type: string
          enum:
            - KukaController
          default: KukaController
          x-go-type-skip-optional-pointer: true
          x-is-discriminator: true
        controller_ip:
          type: string
        controller_port:
          type: integer
          default: 54600
        rsi_server:
          description: The RSI server runs inside of the cell.
          type: object
          required:
            - ip
            - port
          properties:
            ip:
              type: string
              default: 0.0.0.0
            port:
              type: integer
              default: 30152
    UniversalrobotsController:
      title: Universalrobots
      description: The configuration of a physical Universal Robots controller has to contain IP address of the controller.
      type: object
      required:
        - controller_ip
      properties:
        kind:
          type: string
          enum:
            - UniversalrobotsController
          default: UniversalrobotsController
          x-go-type-skip-optional-pointer: true
          x-is-discriminator: true
        controller_ip:
          type: string
    Manufacturer:
      type: string
      enum:
        - abb
        - fanuc
        - kuka
        - universalrobots
        - yaskawa
    VirtualControllerTypes:
      type: string
      enum:
        - abb-irb1010_037_15
        - abb-irb1100_0475_4
        - abb-irb1100_058_4
        - abb-irb1200_7
        - abb-irb1300_09_11
        - abb-irb1300_115_10
        - abb-irb1300_14_12
        - abb-irb1300_14_7
        - abb-irb1600_12_10
        - abb-irb1600_12_6
        - abb-irb1600_145_10
        - abb-irb1600_145_6
        - abb-irb2600ID_185_15
        - abb-irb2600ID_200_8
        - abb-irb2600_165_12
        - abb-irb2600_165_20
        - abb-irb2600_185_12
        - abb-irb4600_205_45
        - abb-irb4600_205_60
        - abb-irb4600_250_20
        - abb-irb4600_255_40
        - fanuc-arc_mate_100iD
        - fanuc-arc_mate_100iD16S
        - fanuc-arc_mate_120iD
        - fanuc-arc_mate_120iD12L
        - fanuc-arc_mate_120iD35
        - fanuc-cr35ib
        - fanuc-cr7ia
        - fanuc-cr7ial
        - fanuc-crx10ia
        - fanuc-crx10ial
        - fanuc-crx20ial
        - fanuc-crx25ia
        - fanuc-crx30ia
        - fanuc-lr_mate_200iD
        - fanuc-lr_mate_200iD4S
        - fanuc-lr_mate_200iD7L
        - fanuc-m10iD12
        - fanuc-m10iD16S
        - fanuc-m20iD25
        - fanuc-m20iD35
        - fanuc-m900iB280L
        - fanuc-m900iB360E
        - fanuc-r2000ic125l
        - fanuc-r2000ic210f
        - kuka-kr10_r1100
        - kuka-kr10_r1100_2
        - kuka-kr10_r900
        - kuka-kr10_r900_2
        - kuka-kr120_r2700_2
        - kuka-kr12_r1810_2
        - kuka-kr150_r2
        - kuka-kr16_r1610_2
        - kuka-kr16_r2010_2
        - kuka-kr20_r1810
        - kuka-kr20_r1810_2
        - kuka-kr210_r2700_2
        - kuka-kr210_r3100_2
        - kuka-kr210_r3300_2
        - kuka-kr240_r2700
        - kuka-kr250_r2700_2
        - kuka-kr3_r540
        - kuka-kr30_r3
        - kuka-kr360_l240_3
        - kuka-kr4_r600
        - kuka-kr500_l340_3
        - kuka-kr50_r2500
        - kuka-kr6_r1820
        - kuka-kr6_r700_2
        - kuka-kr6_r700_sixx
        - kuka-kr6_r900
        - kuka-kr6_r900_2
        - kuka-lbr_iisy_11_r1300
        - universalrobots-ur10cb
        - universalrobots-ur10e
        - universalrobots-ur16e
        - universalrobots-ur20e
        - universalrobots-ur3e
        - universalrobots-ur5cb
        - universalrobots-ur5e
        - yaskawa-ar1440
        - yaskawa-ar1730
        - yaskawa-ar2010
        - yaskawa-ar3120
        - yaskawa-ar700
        - yaskawa-ar900
        - yaskawa-gp110
        - yaskawa-gp12
        - yaskawa-gp180
        - yaskawa-gp180-120
        - yaskawa-gp20hl
        - yaskawa-gp215
        - yaskawa-gp225
        - yaskawa-gp25
        - yaskawa-gp250
        - yaskawa-gp25_12
        - yaskawa-gp280
        - yaskawa-gp35L
        - yaskawa-gp400
        - yaskawa-gp50
        - yaskawa-gp600
        - yaskawa-gp7
        - yaskawa-gp8
        - yaskawa-gp88
        - yaskawa-hc10dtp
        - yaskawa-hc20dtp
    VirtualController:
      title: Virtual
      description: |
        The configuration of a virtual robot controller has to contain the manufacturer string,
        an optional joint position string array and either a type or the full JSON configuration.
        The JSON config of a physical controller can be obtained via `/cells/{cell}/controllers/{controller}/virtual-robot-configuration`
      type: object
      required:
        - manufacturer
      properties:
        kind:
          type: string
          enum:
            - VirtualController
          default: VirtualController
          x-go-type-skip-optional-pointer: true
          x-is-discriminator: true
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
        type:
          $ref: '#/components/schemas/VirtualControllerTypes'
        json:
          type: string
        position:
          type: string
          description: |
            Initial joint position of the first motion group from the virtual robot controller.
            Provide the joint position as a JSON array containing 7 float values,
            each representing a joint position in radians, e.g. "[0, 0, 0, 0, 0, 0, 0]". If the robot has fewer than 7 joints,
            use "0" for each remaining position to ensure the array has exactly 7 values.
    YaskawaController:
      title: Yaskawa
      description: The configuration of a physical Yaskawa robot controller has to contain IP address of the controller.
      type: object
      required:
        - controller_ip
      properties:
        kind:
          type: string
          enum:
            - YaskawaController
          default: YaskawaController
          x-go-type-skip-optional-pointer: true
          x-is-discriminator: true
        controller_ip:
          type: string
    RobotController:
      type: object
      description: The configuration of a physical or virtual robot controller.
      required:
        - name
        - configuration
      properties:
        name:
          description: A unique name of the Controller inside the Cell. It must be a valid k8s label name as defined by [RFC 1035](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#rfc-1035-label-names).
          type: string
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
        configuration:
          oneOf:
            - $ref: '#/components/schemas/AbbController'
            - $ref: '#/components/schemas/FanucController'
            - $ref: '#/components/schemas/KukaController'
            - $ref: '#/components/schemas/UniversalrobotsController'
            - $ref: '#/components/schemas/VirtualController'
            - $ref: '#/components/schemas/YaskawaController'
          discriminator:
            propertyName: kind
          x-go-type-name: ControllerConfig
    ImageCredentials:
      type: object
      description: |
        User provided credentials for creating a secret to pull an image from a registry.
      required:
        - registry
        - user
        - password
      properties:
        registry:
          type: string
        user:
          type: string
        password:
          type: string
    ContainerImage:
      type: object
      description: |
        A user provided, custom container image and the required credentials to pull it from a registry.
      required:
        - image
      properties:
        image:
          description: The location of a container image in the form of `<registry>/<image>:<tag>`.
          type: string
          minLength: 1
        credentials:
          $ref: '#/components/schemas/ImageCredentials'
        secrets:
          type: array
          description: Known secrets for authentication with the container registry.
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
    ContainerEnvironment:
      type: array
      description: |
        A list of environment variables with name and their value.
        These can be used to configure the containerized application, and turn features on or off.
      items:
        type: object
        required:
          - name
          - value
        properties:
          name:
            type: string
          value:
            type: string
    Capacity:
      type: string
      description: The amount of requested storage capacity.
      pattern: ^[0-9]+(\\.[0-9]+)?(Ki|Mi|Gi|Ti|Pi|Ei|B)?$
      example: 100Mi
    ContainerStorage:
      type: object
      description: |
        The path and capacity of a volume that retains data across application restarts.
        The maximal requestable capacity is 300Mi.
        If you need more capacity consider using [storeObject](storeObject).
      required:
        - mount_path
        - capacity
      properties:
        mount_path:
          type: string
          format: path
          example: /data
        capacity:
          $ref: '#/components/schemas/Capacity'
          description: |
            The amount of local storage available for the application.

            **NOTE:** The capacity can NEVER be reduced!
    App:
      type: object
      description: |
        An App is defined by a webserver, packed inside a container, serving a web-application.
      required:
        - name
        - app_icon
        - container_image
      properties:
        name:
          description: |
            The name of the provided application.
            The name must be unique within the cell and is used as a identifier for addressing the application in all API calls
            , e.g. when updating the application.

            It also defines where the application is reachable (/$cell/$name).

            It must be a valid k8s label name as defined by [RFC 1035](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#rfc-1035-label-names).
          type: string
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
          minLength: 1
        app_icon:
          description: The path of the icon for the App (/$cell/$name/$app_icon).
          type: string
          minLength: 1
        container_image:
          $ref: '#/components/schemas/ContainerImage'
        port:
          description: The port the containerized webserver is listening on.
          type: integer
          default: 8080
        environment:
          $ref: '#/components/schemas/ContainerEnvironment'
        storage:
          $ref: '#/components/schemas/ContainerStorage'
        health_path:
          description: |
            Defines the URL path suffix used to check the application's health status. The complete health check URL
            is constructed as `/$cell/$name/$health_path`. When the application is working as expected,
            the endpoint returns an HTTP 200 status code.

            If not specified, the system will default to using the application icon path suffix
            (the value of `app_icon`) as the health check endpoint, resulting in `/$cell/$name/$app_icon`.

            If the health check fails (no response or non-200 status code), the system will
            automatically restart the application container to restore service.
          type: string
    Cell:
      type: object
      description: |
        To create a robot cell, only a valid name is required.
        Once created, a robot cell provides access to the Wandelbots NOVA foundation services.
        The configuration can be customized, e.g. robot controllers, also within apps.
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/CellName'
          default: cell
        description:
          $ref: '#/components/schemas/CellDescription'
        controllers:
          type: array
          items:
            $ref: '#/components/schemas/RobotController'
        apps:
          type: array
          items:
            $ref: '#/components/schemas/App'
    Error:
      type: object
      required:
        - message
      properties:
        code:
          type: string
        message:
          type: string
    OperatingState:
      format: enum
      type: string
      enum:
        - ACTIVE
        - INACTIVE
      description: The operating state.
    ServiceGroup:
      type: string
      enum:
        - SystemService
        - CellService
        - RobotController
        - App
    ServiceStatusSeverity:
      type: string
      enum:
        - INFO
        - WARNING
        - ERROR
    ServiceStatusPhase:
      type: string
      enum:
        - Terminating
        - Initialized
        - Running
        - NoReady
        - Completed
        - ContainerCreating
        - PodInitializing
        - Unknown
        - CrashLoopBackOff
        - Error
        - ImagePullBackOff
        - OOMKilled
        - Pending
        - Evicted
    ServiceStatus:
      type: object
      required:
        - service
        - group
        - status
      properties:
        service:
          type: string
        group:
          $ref: '#/components/schemas/ServiceGroup'
        status:
          type: object
          required:
            - severity
            - code
          properties:
            severity:
              $ref: '#/components/schemas/ServiceStatusSeverity'
            code:
              $ref: '#/components/schemas/ServiceStatusPhase'
            reason:
              type: string
    ServiceStatusList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceStatus'
    ServiceStatusResponse:
      type: object
      description: |
        Response containing both the overall operating state of the cell and detailed status information for each service within the cell.

        The operating state indicates whether the cell is active or inactive, while the service statuses provide specific health and operational
        information for individual service running in the cell.
      required:
        - operating_state
        - service_status
      properties:
        operating_state:
          $ref: '#/components/schemas/OperatingState'
        service_status:
          $ref: '#/components/schemas/ServiceStatusList'
    MotionGroupPhysical:
      required:
        - motion_group
        - name_from_controller
        - active
      type: object
      properties:
        motion_group:
          type: string
          description: The unique identifier to address a motion group.
        name_from_controller:
          type: string
          description: The name the motion group has on the robot controller.
        active:
          type: boolean
          description: |
            True if this motion group is active.
            When a request for a motion group is made, the motion group will be activated and remain activated.
            The robot controller provides the current state and data for all active motion groups.
            See [getCurrentMotionGroupState](getCurrentMotionGroupState).
            To deactivate a motion group, use [deactivateMotionGroup](deactivateMotionGroup).
        model_from_controller:
          type: string
          description: The robot controller model, if available. Usable for frontend 3D visualization.
        serial_number:
          type: string
          description: |
            The serial number of the motion group, if available. If not available, the serial number of the robot controller.
            if available. If not available, the response is empty.
      description: |
        The data type describes the physically connected motion groups on a robot controller.
    VersionNumber:
      required:
        - major_version
      type: object
      properties:
        major_version:
          type: integer
          format: uint32
        minor_version:
          type: integer
          format: uint32
        build_version:
          type: integer
          format: uint32
        bugfix_version:
          type: integer
          format: uint32
        minor_version_wildcard:
          type: boolean
          description: If minor version is a wildcard set to true.
        build_version_wildcard:
          type: boolean
          description: If build version is a wildcard set to true.
        bugfix_version_wildcard:
          type: boolean
          description: If bugfix version is a wildcard set to true.
        string_version:
          type: string
          description: A string representation of the version e.g. 1.1.x.x.
      description: A generic representation of a version number.
    Controller:
      required:
        - controller
        - model_name
        - host
        - allow_software_install_on_controller
        - motion_groups
        - has_error
      type: object
      properties:
        controller:
          type: string
          description: |
            The unique identifier to address the robot controller in the cell.
        model_name:
          type: string
          description: |
            The unique identifier to address a robot controller model when configuring the robot controller.
            Used for evaluation of the robot controller model and to ensure communication with the expected robot controller type.
        host:
          type: string
          description: |
            Resolvable host name or IP address that connects to the robot controller.
        allow_software_install_on_controller:
          type: boolean
          description: |
            True if the user has actively confirmed that it is allowed
            to install required communication software onto the robot controller.

            NOTE: Installing third party software on a robot controller
            can result in liability issues in regard to the actual certified
            state of the robot system. Please contact your company's legal responsible before installing third party software.
        motion_groups:
          type: array
          items:
            $ref: '#/components/schemas/MotionGroupPhysical'
          description: |
            The list of physical connected motion groups as detected by the controller.
        vendor_software_version:
          $ref: '#/components/schemas/VersionNumber'
        has_error:
          type: boolean
          description: |
            Set to true if there was an error while inspecting this instance,
            e.g. The robot controller is not reachable due to missing network connection or turned off.

            The instance remains configured but can't provide information on the robot controller.
        error_details:
          type: string
          description: |
            If has_error is true, error_details provides detailed background information about the error.
      description: The data type to describe a robot controller.
    ControllersList:
      required:
        - controllers
      type: object
      properties:
        controllers:
          type: array
          items:
            $ref: '#/components/schemas/Controller'
      description: The list of configured robot controllers.
    ReleaseChannel:
      type: string
      enum:
        - stable
        - next
      description: |
        The channel that defines what a new Wandelbots NOVA version is.

          * `next` the over all latest version
          * `stable` newes patch of the current version
    ConfigurationResourceId:
      description: Identifier of a configuration resource.
      type: string
    ConfigurationResourceArray:
      type: array
      description: Array of configuration resources.
      items:
        $ref: '#/components/schemas/ConfigurationResource'
    ConfigurationResource:
      type: object
      description: Configuration resource object.
      properties:
        id:
          $ref: '#/components/schemas/ConfigurationResourceId'
        name:
          type: string
          description: Human-readable name of the configuration resource.
        children:
          $ref: '#/components/schemas/ConfigurationResourceArray'
      required:
        - id
        - name
    Metadata:
      description: Additional metadata to add to the backup
      type: object
      additionalProperties:
        type: string
    ConfigurationArchive:
      description: Binary data representing a configuration archive.
      type: string
      format: binary
    Error-2:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    LicenseStatusEnum:
      type: string
      enum:
        - OK
        - EXPIRED
        - SUSPENDED
        - GRACE_PERIOD_OVER
        - NOT_FOUND
    LicenseStatus:
      description: Status of the license.
      type: object
      required:
        - status
        - message
      properties:
        status:
          $ref: '#/components/schemas/LicenseStatusEnum'
        message:
          type: string
    License:
      type: object
      required:
        - product_name
        - owner_email
        - license_key
        - status
        - grace_period_expiry_date
        - consumed_activations
        - allowed_activations
      properties:
        product_name:
          description: Name of the licensed product.
          type: string
        owner_email:
          description: Mail address of the license owner.
          type: string
          format: email
        license_key:
          description: Identification key of the license.
          type: string
        license_expiry_date:
          description: Expiration date of the license.
          type: string
          format: date
        grace_period_expiry_date:
          description: End date of grace period, given if instance is not connected to internet.
          type: string
          format: date-time
        consumed_activations:
          description: Amount of times the license was activated.
          type: integer
        allowed_activations:
          description: Amount of times the license can be activated.
          type: integer
        feature_limitations:
          description: Feature limitations of the license.
          type: object
          additionalProperties:
            type: integer
        feature_flags:
          description: Features enabled by a license.
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/LicenseStatus'
    ControllerCapabilities:
      required:
        - support_freedrive
        - support_control
      type: object
      properties:
        support_freedrive:
          type: boolean
          description: Can this controller be moved through freedrive (true), or not (false).
        support_control:
          type: boolean
          description: Can this controller be controlled with NOVA (true) or is it only possible to read data (false).
    OperationMode:
      enum:
        - OPERATION_MODE_UNKNOWN
        - OPERATION_MODE_NO_CONTROLLER
        - OPERATION_MODE_DISCONNECTED
        - OPERATION_MODE_POWER_ON
        - OPERATION_MODE_PENDING
        - OPERATION_MODE_MANUAL
        - OPERATION_MODE_MANUAL_T1
        - OPERATION_MODE_MANUAL_T2
        - OPERATION_MODE_AUTO
        - OPERATION_MODE_RECOVERY
      type: string
      format: enum
      description: |
        Current operation mode of the configured robot controller.
        Operation modes in which the attached motion groups can be moved are:
        - OPERATION_MODE_MANUAL (if enabling switch is pressed)
        - OPERATION_MODE_MANUAL_T1 (if enabling switch is pressed)
        - OPERATION_MODE_MANUAL_T2 (if enabling switch is pressed)
        - OPERATION_MODE_AUTO (without needing to press enabling switch)
        All other modes are considered as non-operational.
    SafetyStateType:
      enum:
        - SAFETY_STATE_UNKNOWN
        - SAFETY_STATE_FAULT
        - SAFETY_STATE_NORMAL
        - SAFETY_STATE_MASTERING
        - SAFETY_STATE_CONFIRM_SAFETY
        - SAFETY_STATE_OPERATOR_SAFETY
        - SAFETY_STATE_PROTECTIVE_STOP
        - SAFETY_STATE_REDUCED
        - SAFETY_STATE_STOP
        - SAFETY_STATE_STOP_0
        - SAFETY_STATE_STOP_1
        - SAFETY_STATE_STOP_2
        - SAFETY_STATE_RECOVERY
        - SAFETY_STATE_DEVICE_EMERGENCY_STOP
        - SAFETY_STATE_ROBOT_EMERGENCY_STOP
        - SAFETY_STATE_VIOLATION
      type: string
      format: enum
      description: |
        Current safety state of the configured robot controller.
        Operation modes in which the attached motion groups can be moved are:
        - SAFETY_STATE_NORMAL
        - SAFETY_STATE_REDUCED
        All other modes are considered as non-operational.
    Joints:
      required:
        - joints
      type: object
      properties:
        joints:
          type: array
          items:
            type: number
            format: double
      description: |
        This structure describes a set of joint values of a motion group.

        We call a set of joint values describing the current position in joint space of a motion group a "joint position".
        Joint position was chosen as the term to be consistent with the terms "joint velocity" and "joint acceleration".

        `joints` must have as many entries as the motion group's degrees of freedom to be valid.

        Float precision is the default.
    Vector3d:
      title: Vector3d
      type: array
      maxItems: 3
      minItems: 3
      items:
        type: number
        format: double
      prefixItems:
        - title: x
        - title: 'y'
        - title: z
      description: |
        A three-dimensional vector [x, y, z] with double precision.
    RotationVector:
      title: RotationVector
      type: array
      maxItems: 3
      minItems: 3
      items:
        type: number
        format: double
      prefixItems:
        - title: rx
        - title: ry
        - title: rz
      description: |
        Defines a rotation in 3D space.
        A three-dimensional Vector [rx, ry, rz] with double precision.
        Rotation is applied around the vector.
        The angle of rotation equals the length of the vector.
    PoseInCoordinateSystem:
      required:
        - position
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Vector3d'
          description: Position vector, defined in [x, y, z] with floating numbers in millimeters (ms).
        orientation:
          $ref: '#/components/schemas/RotationVector'
          description: 'Rotation vector, defined in [rx, ry, rz] with floating numbers. The rotation is represented in vector3 using an axis-angle representation: axis.normalized * angle (angle in radians).'
        coordinate_system:
          type: string
          description: |-
            Unique identifier addressing the reference coordinate system of the pose.
            Default is the world coordinate system.
      description: |-
        Representing a pose in space with its origin in `coordinate_system`.
        A pose consists of positional coordinates [x, y, z] in millimeters (mm) and orientational coordinates in axis-angle representation [rx, ry, rz] in radian (rad).
    TcpPose:
      required:
        - position
        - orientation
        - tcp
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Vector3d'
        orientation:
          $ref: '#/components/schemas/Vector3d'
        coordinate_system:
          type: string
          description: Unique name of base coordinate system, if empty world is used.
        tcp:
          type: string
          description: Identifier of tcp on controller.
      description: Representing a robot pose in operational space aware of a configured TCP.
    MotionVector:
      type: object
      properties:
        linear:
          $ref: '#/components/schemas/Vector3d'
        angular:
          $ref: '#/components/schemas/Vector3d'
        coordinate_system:
          type: string
          description: optional, unique name of base coordinate system, if empty world is used
    ForceVector:
      type: object
      properties:
        force:
          $ref: '#/components/schemas/Vector3d'
        moment:
          $ref: '#/components/schemas/Vector3d'
        coordinate_system:
          type: string
          description: optional, unique name of base coordinate system, if empty world is used
      description: |
        Representing a force on a specific point in operational space, e.g. on robot
        flange.
    MotionGroupState_JointLimitReached:
      type: object
      required:
        - limit_reached
      properties:
        limit_reached:
          type: array
          items:
            type: boolean
          description: If true, operational (soft) jointLimit is reached for specific joint.
      description: |
        Indicates which joint of the motion group is in a limit.
        If a joint is in its limit, only this joint can be moved. Movements that affect any other joints are not executed.
    MotionGroupState:
      required:
        - motion_group
        - controller
        - joint_position
        - joint_velocity
        - tcp_pose
        - velocity
        - joint_limit_reached
      type: object
      properties:
        motion_group:
          type: string
          description: Identifier of the motion group.
        controller:
          type: string
          description: 'Convenience: Identifier of the robot controller the motion group is attached to.'
        joint_position:
          $ref: '#/components/schemas/Joints'
          description: |
            Current joint position of each joint in [rad]
        joint_velocity:
          $ref: '#/components/schemas/Joints'
          description: |
            Current joint velocity of each joint in [rad/s]
        joint_torque:
          $ref: '#/components/schemas/Joints'
          description: |
            Current joint torque of each joint in [Nm].
            Is only available if the robot controller supports it (e.g. available for UR Controllers).
        flange_pose:
          $ref: '#/components/schemas/PoseInCoordinateSystem'
          description: |
            Current position of the Flange (last point of the motion group before the endeffector starts) in [mm].
            The position is relative to the response_coordinate_system that is specified in the request.
            For robot arms a flange pose is always returned, for positioners the flange might not be available, depending on the model.
        tcp_pose:
          $ref: '#/components/schemas/TcpPose'
          description: |
            Current position of the TCP currently selected on the robot control panel.
            Attention: This TCP is not necessarily the same as specified as `tcp` in the request.
            If you need the information for the specified TCP, use the tcp_pose in the outer response.
            Position is in [mm].
            The position is relative to the response_coordinate_system that is specified in the request.
        velocity:
          $ref: '#/components/schemas/MotionVector'
          description: |
            Current velocity at TCP in [mm/s].
            If `tcp` is not specified, the velocity at the flange is returned.
            The velocity is relative to the response_coordinate_system specified in the request.
        force:
          $ref: '#/components/schemas/ForceVector'
          description: |
            Current Force at TCP in [N].
            Is only available if the robot controller supports it, e.g. available for UR Controllers.
            The velocity is relative to the response_coordinate_system specified in the request.
        joint_limit_reached:
          $ref: '#/components/schemas/MotionGroupState_JointLimitReached'
          description: |
            Indicates whether the joint is in a limit for all joints of the motion group.
        joint_current:
          $ref: '#/components/schemas/Joints'
          description: |
            Current Current at TCP in [A].
            Is only available if the robot controller supports it, e.g. available for UR Controllers.
      description: Presents the current state of the motion group.
    RobotControllerState:
      required:
        - controller
        - operation_mode
        - safety_state
        - timestamp
        - active_motion_groups
      type: object
      properties:
        controller:
          type: string
          default: controller
          description: Identifier of the configured robot controller.
        operation_mode:
          $ref: '#/components/schemas/OperationMode'
        safety_state:
          $ref: '#/components/schemas/SafetyStateType'
        timestamp:
          type: string
          format: date-time
          description: Timestamp indicating when the represented information was received from the robot controller.
        velocity_override:
          type: integer
          description: |
            If made available by the robot controller, returns the current velocity override in
            [percentage] for movements adjusted on robot control panel.
            Valid value range: 1 - 100.
          format: uint32
        active_motion_groups:
          title: MotionGroupState[]
          type: array
          items:
            $ref: '#/components/schemas/MotionGroupState'
          description: |
            State of indicated motion groups.
            In case of state request via controller all configured motion groups are returned.
            In case of executing a motion only the affected motion groups are returned.
      description: Returns the whole current state of robot controller.
    IODirection:
      enum:
        - IO_TYPE_INPUT
        - IO_TYPE_OUTPUT
      type: string
      description: Identifies the input/output type.
      format: enum
    IOValueType:
      enum:
        - IO_VALUE_BOOLEAN
        - IO_VALUE_ANALOG_FLOAT
        - IO_VALUE_ANALOG_INTEGER
      type: string
      description: Data type of the input/output.
      format: enum
    UnitType:
      enum:
        - UNIT_NONE
        - UNIT_KILOGRAM
        - UNIT_AMPERE
        - UNIT_KELVIN
        - UNIT_HERTZ
        - UNIT_NEWTON
        - UNIT_VOLT
        - UNIT_CELSIUS
        - UNIT_NEWTON_METER
        - UNIT_METER
      type: string
      description: The unit of input/outputs value.
      format: enum
    BooleanValue:
      required:
        - boolean_value
      type: object
      properties:
        boolean_value:
          type: boolean
        value_type:
          type: string
          const: boolean
      description: |
        Value of a digital input/output.
    IntegerValue:
      required:
        - integer_value
      type: object
      properties:
        integer_value:
          type: string
        value_type:
          type: string
          const: integer
      description: |
        Value of an analog input/output with integer representation.

        > The integral value is transmitted as a string to avoid precision loss during conversion to JSON.
        > We recommend to use int64 in your implementation. If you want to interact with int64 in numbers,
        > there are some JS bigint libraries available to parse the string into an integral value.
    FloatValue:
      required:
        - float_value
      type: object
      properties:
        float_value:
          type: number
          description: |
            Value of an analog input/output in floating number representation.
          format: double
        value_type:
          type: string
          const: float
      description: Input/Output floating number representation.
    IODescription:
      required:
        - id
        - name
        - direction
        - value_type
      type: object
      properties:
        id:
          type: string
          description: |
            Unique identifier defined by the controller. Identifiers are only defined uniquely per controller,
            e.g. Inputs/Outputs for two different robots on the same controller can have the same identifier.
        name:
          type: string
          description: |
            Name of the input/output. Customize it on the physical controller or in the virtual robot specification.
        group:
          type: string
          description: |
            Name of the input/output group. Customize it on the physical controller or in the virtual robot specification.
        direction:
          $ref: '#/components/schemas/IODirection'
        value_type:
          $ref: '#/components/schemas/IOValueType'
        unit:
          $ref: '#/components/schemas/UnitType'
        min:
          oneOf:
            - $ref: '#/components/schemas/BooleanValue'
            - $ref: '#/components/schemas/IntegerValue'
            - $ref: '#/components/schemas/FloatValue'
          discriminator:
            propertyName: value_type
            mapping:
              boolean: '#/components/schemas/BooleanValue'
              integer: '#/components/schemas/IntegerValue'
              float: '#/components/schemas/FloatValue'
        max:
          oneOf:
            - $ref: '#/components/schemas/BooleanValue'
            - $ref: '#/components/schemas/IntegerValue'
            - $ref: '#/components/schemas/FloatValue'
          discriminator:
            propertyName: value_type
            mapping:
              boolean: '#/components/schemas/BooleanValue'
              integer: '#/components/schemas/IntegerValue'
              float: '#/components/schemas/FloatValue'
    ListIODescriptionsResponse:
      required:
        - io_descriptions
      type: object
      properties:
        io_descriptions:
          type: array
          items:
            $ref: '#/components/schemas/IODescription'
      description: Array of input/output description values.
    IOBooleanValue:
      required:
        - io
        - boolean_value
      type: object
      properties:
        io:
          type: string
          description: Unique identifier of the input/output.
        boolean_value:
          type: boolean
          description: |
            Value of a digital input/output.
        value_type:
          type: string
          const: boolean
      description: Input/Output boolean value representation.
      title: boolean
    IOIntegerValue:
      required:
        - io
        - integer_value
      type: object
      properties:
        io:
          type: string
          description: Unique identifier of the input/output.
        integer_value:
          type: string
          description: |
            Value of an analog input/output with integer representation.

            > The integral value is transmitted as a string to avoid precision loss during conversion to JSON.
            > We recommend to use int64 in your implementation. If you want to interact with int64 in numbers,
            > there are some JS bigint libraries available to parse the string into an integral value.
        value_type:
          type: string
          const: integer
      description: Input/Output integer value representation.
      title: integer
    IOFloatValue:
      required:
        - io
        - float_value
      type: object
      properties:
        io:
          type: string
          description: Unique identifier of the input/output.
        float_value:
          type: number
          description: |
            Value of an analog input/output in floating number representation.
          format: double
        value_type:
          type: string
          const: float
      description: Input/Output floating number representation.
      title: floating
    ListIOValuesResponse:
      required:
        - io_values
      type: object
      properties:
        io_values:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/IOBooleanValue'
              - $ref: '#/components/schemas/IOIntegerValue'
              - $ref: '#/components/schemas/IOFloatValue'
            discriminator:
              propertyName: value_type
              mapping:
                boolean: '#/components/schemas/IOBooleanValue'
                integer: '#/components/schemas/IOIntegerValue'
                float: '#/components/schemas/IOFloatValue'
      description: Array of input/output values.
      example:
        io_values:
          - io: io1
            boolean_value: true
            value_type: boolean
          - io: io2
            integer_value: '42'
            value_type: integer
          - io: io3
            float_value: 3.14
            value_type: float
    Comparator:
      enum:
        - COMPARATOR_EQUALS
        - COMPARATOR_NOT_EQUALS
        - COMPARATOR_GREATER
        - COMPARATOR_GREATER_EQUAL
        - COMPARATOR_LESS
        - COMPARATOR_LESS_EQUAL
      type: string
      format: enum
      description: |
        Comparator for the comparison of two values.
        The comparator is used to compare two values and return a boolean result.
        The default comparator is unknown.
    WaitForIOEventRequest:
      title: WaitForIOEventRequest
      type: object
      required:
        - io
        - comparator
      properties:
        io:
          oneOf:
            - $ref: '#/components/schemas/IOBooleanValue'
            - $ref: '#/components/schemas/IOIntegerValue'
            - $ref: '#/components/schemas/IOFloatValue'
          discriminator:
            propertyName: value_type
            mapping:
              boolean: '#/components/schemas/IOBooleanValue'
              integer: '#/components/schemas/IOIntegerValue'
              float: '#/components/schemas/IOFloatValue'
        comparator:
          $ref: '#/components/schemas/Comparator'
          description: |
            Comparator for the comparison of two values.
            Use the measured I/O as the base value (a) and the expected input/output value as the comparator (b): e.g., a > b.
      description: The value to compare with the current value of the input/output.
    RobotSystemMode:
      enum:
        - ROBOT_SYSTEM_MODE_UNDEFINED
        - ROBOT_SYSTEM_MODE_DISCONNECT
        - ROBOT_SYSTEM_MODE_MONITOR
        - ROBOT_SYSTEM_MODE_CONTROL
        - ROBOT_SYSTEM_MODE_FREE_DRIVE
      type: string
      description: |
        The system mode of the robot system.

        ### ROBOT_SYSTEM_MODE_UNDEFINED

        Indicates that the robot controller is currently performing a mode transition.

        ### ROBOT_SYSTEM_MODE_DISCONNECT

        There is no communication with the robot controller at all. All connections are closed.
        No command is sent to the robot controller while in this mode. No input/output interaction is possible in this mode!
        All move requests will be rejected in this mode!

        ### ROBOT_SYSTEM_MODE_MONITOR

        A connection to the robot controller is established to only read the robot controller state.
        No command is sent to the robot controller while in this mode. It is possible to receive input/output information.
        All move requests will be rejected in this mode!

        ### ROBOT_SYSTEM_MODE_CONTROL

        An active connection is established with the robot controller and the robot system is cyclic commanded
        to stay in its actual position. The robot controller state is received in the cycle time of the robot controller.
        Requests via the MotionService and JoggingService will be processed and executed in this mode.
        Input/Output interaction is possible in this mode! **In this mode the robot system can be commanded to move.**

        ### ROBOT_SYSTEM_MODE_FREE_DRIVE

        Like ROBOT_SYSTEM_MODE_MONITOR a connection to the robot controller is established to only read the robot controller state.
        The difference is that the motion groups can be moved by the user (Free Drive). Thus, the servo motors are turned on.
        All move requests will be rejected in this mode! **This mode is not supported by every robot!**
        Use [getSupportedModes](getSupportedModes) to evaluate if the device support free drive.
      format: enum
    GetModeResponse:
      required:
        - robot_system_mode
      type: object
      properties:
        robot_system_mode:
          $ref: '#/components/schemas/RobotSystemMode'
    SettableRobotSystemMode:
      enum:
        - ROBOT_SYSTEM_MODE_MONITOR
        - ROBOT_SYSTEM_MODE_CONTROL
      type: string
      format: enum
    ModeChangeResponse:
      required:
        - current_robot_mode
        - previous_robot_mode
        - cause_of_change
      type: object
      properties:
        current_robot_mode:
          $ref: '#/components/schemas/RobotSystemMode'
        by_client_request:
          type: boolean
          description: True if mode change was requested by client.
        previous_robot_mode:
          $ref: '#/components/schemas/RobotSystemMode'
        cause_of_change:
          type: string
          description: Details about cause of mode change.
      description: |
        Mode change example:
        * Client sends [jointJogging](jointJogging)](cell="..",...)
        * Server responds with *current_robot_mode: ROBOT_SYSTEM_MODE_UNDEFINED, by_client_request: true* at the beginning of the transition.
        * Server responds with *current_robot_mode: ROBOT_SYSTEM_MODE_CONTROL, by_client_request: true* when transition is done.

        In case an error happens during execution, e.g. a path would lead to a joint limit violation:
        * Server responds with *current_robot_mode: ROBOT_SYSTEM_MODE_UNDEFINED, by_client_request: false*
        * Server responds with *current_robot_mode: ROBOT_SYSTEM_MODE_MONITOR, by_client_request: false*

        In case an error happens during connection, e.g. the robot is not reachable:
        * Client sends [setDefaultMode](setDefaultMode)(mode: MODE_CONTROL)
        * Server responds with *current_robot_mode:ROBOT_SYSTEM_MODE_UNDEFINED, by_client_request: true*
        * Server responds with *current_robot_mode:ROBOT_SYSTEM_MODE_DISCONNECT, by_client_request: false*
    VirtualRobotConfiguration:
      required:
        - name
        - content
      type: object
      properties:
        name:
          type: string
          description: |
            Name of the configuration file generated by the unique identifier of the controller and a time stamp.
        content:
          type: string
          description: |
            Content of the configuration file. Copy & paste to the [addRobotController](addRobotController) configuration.json parameter.
    OrientationType:
      enum:
        - ROTATION_VECTOR
        - QUATERNION
        - EULER_ANGLES_INTRINSIC_ZXZ
        - EULER_ANGLES_INTRINSIC_XYX
        - EULER_ANGLES_INTRINSIC_YZY
        - EULER_ANGLES_INTRINSIC_ZYZ
        - EULER_ANGLES_INTRINSIC_XZX
        - EULER_ANGLES_INTRINSIC_YXY
        - EULER_ANGLES_INTRINSIC_XYZ
        - EULER_ANGLES_INTRINSIC_YZX
        - EULER_ANGLES_INTRINSIC_ZXY
        - EULER_ANGLES_INTRINSIC_XZY
        - EULER_ANGLES_INTRINSIC_ZYX
        - EULER_ANGLES_INTRINSIC_YXZ
        - EULER_ANGLES_EXTRINSIC_ZXZ
        - EULER_ANGLES_EXTRINSIC_XYX
        - EULER_ANGLES_EXTRINSIC_YZY
        - EULER_ANGLES_EXTRINSIC_ZYZ
        - EULER_ANGLES_EXTRINSIC_XZX
        - EULER_ANGLES_EXTRINSIC_YXY
        - EULER_ANGLES_EXTRINSIC_ZYX
        - EULER_ANGLES_EXTRINSIC_XZY
        - EULER_ANGLES_EXTRINSIC_YXZ
        - EULER_ANGLES_EXTRINSIC_YZX
        - EULER_ANGLES_EXTRINSIC_XYZ
        - EULER_ANGLES_EXTRINSIC_ZXY
      type: string
      description: |
        The type of rotation description that is used to specify the orientation.

        **Rotation Vector notation**

        * The rotation is represented using an axis-angle representation:
        > axis = Vector[0:2]
        > angle = |axis| in [rad]
        > axis.normalized * angle

        **Quaternion notation**

        * The rotation is represented using a unit quaternion: [x, y, z, w].
        * The vector part [x, y, z] is the imaginary part of the quaternion, and the scalar part [w] is the real part.

        **Euler notation**

        * *extrinsic* fixed external reference system
        * *intrinsic* reference system fixed to rotation body
        > angles = Vector[0:2] in [rad].
        * ZYX, ZXZ,...
          - mapping of the given angles values to the (either intrinsic
            or extrinsic) axes in the stated order.
         > Example ZYX: Z = Vector[0], Y = Vector[1], X = Vector[2].
      format: enum
      default: ROTATION_VECTOR
    Orientation:
      title: Orientation
      type: array
      maxItems: 4
      minItems: 3
      items:
        type: number
        format: double
      prefixItems:
        - title: x
        - title: 'y'
        - title: z
        - title: w
      description: |
        Describes an orientation in 3D space.
        A tree-to-four-dimensional vector [x, y, z, w] with double precision.
    CoordinateSystem:
      required:
        - coordinate_system
      type: object
      properties:
        coordinate_system:
          type: string
          description: Unique identifier of the coordinate system.
        name:
          type: string
          description: Human readable name of this coordinate system.
        reference_coordinate_system:
          type: string
          description: The identifier of the reference coordinate system. Empty if world is used.
        position:
          $ref: '#/components/schemas/Vector3d'
        orientation:
          $ref: '#/components/schemas/Orientation'
        orientation_type:
          $ref: '#/components/schemas/OrientationType'
    ListResponse:
      type: object
      properties:
        coordinatesystems:
          type: array
          items:
            $ref: '#/components/schemas/CoordinateSystem'
    MotionGroup:
      required:
        - motion_group
        - controller
        - name_from_controller
        - model_from_controller
      type: object
      properties:
        motion_group:
          type: string
          description: Identifier of the motion group.
        controller:
          type: string
          description: Identifier of the robot controller the motion group is attached to.
        name_from_controller:
          type: string
          description: The name of the motion group has on the robot controller.
        model_from_controller:
          type: string
          description: |
            The robot controller model, if available. Usable for frontend 3D visualization.
        serial_number:
          type: string
          description: |
            The serial number of the motion group, if available. If not available, the serial number of the robot controller.
            if available. If not available, then empty.
      description: The data type describes the physically connected motion groups on a robot controller, e.g., a robot arm.
    MotionGroupsList:
      required:
        - motion_groups
      type: object
      properties:
        motion_groups:
          type: array
          items:
            $ref: '#/components/schemas/MotionGroup'
      description: A list of motion groups.
    InfoServiceCapabilities:
      required:
        - list_tcps
        - get_active_tcp
        - get_safety_setup
        - get_motion_group_specification
        - list_payloads
        - get_active_payload
        - get_mounting
        - get_blending_zones
      type: object
      properties:
        list_tcps:
          type: boolean
          description: Is this motion group able to provide a list of all available TCPs.
        get_active_tcp:
          type: boolean
          description: Is this motion group able to provide the currently active TCP.
        get_safety_setup:
          type: boolean
          description: Is this motion group able to get the safety setup.
        get_motion_group_specification:
          type: boolean
          description: Is this motion group able to provide a motion group specification.
        list_payloads:
          type: boolean
          description: Is this motion group able to provide a list of all available payloads.
        get_active_payload:
          type: boolean
          description: Is this motion group able to provide the currently active payload.
        get_mounting:
          type: boolean
          description: Is this motion group able to provide the mounting information.
    KinematicServiceCapabilities:
      required:
        - calculate_joint_position
        - calculate_all_joint_positions
        - calculate_tcp_pose
      type: object
      properties:
        calculate_joint_position:
          type: boolean
          description: Can this motion-group compute its nearest joint position from a TCP pose.
        calculate_all_joint_positions:
          type: boolean
          description: Can this motion-group compute all its possible joint positions from a TCP pose.
        calculate_tcp_pose:
          type: boolean
          description: Can this motion-group compute its TCP pose from joint positions.
    AllJointPositionsRequest:
      required:
        - motion_group
        - tcp_pose
      type: object
      properties:
        motion_group:
          type: string
          description: Identifier of the motion-group.
        tcp_pose:
          $ref: '#/components/schemas/TcpPose'
      description: Request to calculate the joint positions of a motion group in order to move its TCP to a specific pose (Inverse Kinematic Solutions).
    AllJointPositionsResponse:
      required:
        - joint_position
      type: object
      properties:
        joint_positions:
          type: array
          items:
            $ref: '#/components/schemas/Joints'
          description: Joint position in [rad].
      description: A list of Joint Positions. If any of them is applied to the motion-group, its TCP will be at the specified pose.
    JointPositionRequest:
      required:
        - motion_group
        - tcp_pose
        - reference_joint_position
      type: object
      properties:
        motion_group:
          type: string
          description: Identifier of the motion group.
        tcp_pose:
          $ref: '#/components/schemas/TcpPose'
        reference_joint_position:
          $ref: '#/components/schemas/Joints'
      description: Request to find the joint positions the motion-group needs to apply for its TCP to be in a specified pose (Inverse Kinematic Solution).
    TcpPoseRequest:
      required:
        - motion_group
        - joint_position
      type: object
      properties:
        motion_group:
          type: string
          description: Unique identifier of the motion-group.
        joint_position:
          $ref: '#/components/schemas/Joints'
        tcp:
          type: string
          description: |
            Specifies the TCP at which the pose is calculated via its unique identifier.
            Optional. If not provided, the currently active TCP is used.
        coordinate_system:
          type: string
          description: |
            Unique identifier of the base coordinate system of the calculated pose.
            Optional. If empty, world is used.
      description: Request to compute the TCP pose for a single joint position sample.
    Mounting:
      required:
        - coordinate_system
        - pose
      type: object
      properties:
        coordinate_system:
          type: string
          description: |
            Identifier of mounting coordinate system. The motion group is based on the origin of this coordinate system.
        pose:
          $ref: '#/components/schemas/PoseInCoordinateSystem'
          description: The pose offset based on world coordinate system of the mounting.
      description: Mounting of a motion group.
    JoggingServiceCapabilities:
      required:
        - joint_jogging
        - cartesian_jogging
      type: object
      properties:
        joint_jogging:
          type: boolean
          description: Can this motion group be moved via joint jogging.
        cartesian_jogging:
          type: boolean
          description: Can this motion group be moved via cartesian jogging.
    MotionGroupModel:
      title: MotionGroupModel
      type: string
      format: enum
      description: String identifiying the model of a motion group.
      enum:
        - ABB_120_058_3
        - ABB_140_081_6
        - ABB_1010_037_15
        - ABB_1100_058_4
        - ABB_1100_0475_4
        - ABB_1200_07_7
        - ABB_1300_115_10
        - ABB_1300_09_11
        - ABB_1300_14_12
        - ABB_1300_14_7
        - ABB_1400_144_5
        - ABB_1520ID_15_4
        - ABB_1600_12_6
        - ABB_1600_12_10
        - ABB_1600_145_6
        - ABB_1600_145_10
        - ABB_1660ID_155_4
        - ABB_2600_165_12
        - ABB_2600_165_20
        - ABB_2600_185_12
        - ABB_2600ID_185_15
        - ABB_2600ID_200_8
        - ABB_4600_250_20
        - ABB_4600_255_40
        - ABB_4600_205_45
        - ABB_4600_205_60
        - FANUC_CR4iA
        - FANUC_CR7iA
        - FANUC_CR7iAL
        - FANUC_CR14iAL
        - FANUC_CR15iA
        - FANUC_CR35iA
        - FANUC_CR35iB
        - FANUC_CRX5iA
        - FANUC_CRX10iA
        - FANUC_CRX10iAL
        - FANUC_CRX20iAL
        - FANUC_CRX25iA
        - FANUC_M10iD8L
        - FANUC_M10iD10L
        - FANUC_M10iD12
        - FANUC_M10iD16S
        - FANUC_M20iB25
        - FANUC_M20iB25C
        - FANUC_M20iB35S
        - FANUC_M20iD12L
        - FANUC_M20iD25
        - FANUC_M20iD35
        - FANUC_M900iB280L
        - FANUC_M900iB360E
        - FANUC_ARC_Mate_50iD
        - FANUC_ARC_Mate_50iD7L
        - FANUC_ARC_Mate_100iD
        - FANUC_ARC_Mate_100iD16S
        - FANUC_ARC_Mate_100iD8L
        - FANUC_ARC_Mate_100iD10L
        - FANUC_ARC_Mate_120iD
        - FANUC_ARC_Mate_120iD12L
        - FANUC_LR_Mate_200iD
        - FANUC_LR_Mate_200iD4S
        - FANUC_LR_Mate_200iD7L
        - FANUC_R2000iC125L
        - FANUC_R2000iC210F
        - UniversalRobots_UR3
        - UniversalRobots_UR5
        - UniversalRobots_UR10
        - UniversalRobots_UR3e
        - UniversalRobots_UR5e
        - UniversalRobots_UR10e
        - UniversalRobots_UR16e
        - UniversalRobots_UR20e
        - Yaskawa_AR700
        - Yaskawa_AR900
        - Yaskawa_AR1440
        - Yaskawa_AR1440E
        - Yaskawa_AR1730
        - Yaskawa_AR2010
        - Yaskawa_AR3120
        - Yaskawa_GP4
        - Yaskawa_GP7
        - Yaskawa_GP8
        - Yaskawa_GP8L
        - Yaskawa_GP12
        - Yaskawa_GP20HL
        - Yaskawa_GP25
        - Yaskawa_GP25SV
        - Yaskawa_GP25_12
        - Yaskawa_GP35L
        - Yaskawa_GP50
        - Yaskawa_GP70L
        - Yaskawa_GP88
        - Yaskawa_GP110
        - Yaskawa_GP110B
        - Yaskawa_GP110H
        - Yaskawa_GP165R
        - Yaskawa_GP180
        - Yaskawa_GP180H
        - Yaskawa_GP180_120
        - Yaskawa_GP200R
        - Yaskawa_GP200S
        - Yaskawa_GP215
        - Yaskawa_GP225
        - Yaskawa_GP225H
        - Yaskawa_GP250
        - Yaskawa_GP280
        - Yaskawa_GP280L
        - Yaskawa_GP300R
        - Yaskawa_GP400
        - Yaskawa_GP400R
        - Yaskawa_GP600
        - Yaskawa_HC10
        - Yaskawa_HC10DTP
        - Yaskawa_HC20DTP
        - Yaskawa_HC30PL
        - Yaskawa_TURN1
        - Yaskawa_TURN2
        - Yaskawa_TURN3
        - KUKA_KR150_R2
        - KUKA_KR3_R540
        - KUKA_KR4_R600
        - KUKA_KR6_R700
        - KUKA_KR6_R700_2
        - KUKA_KR6_R900
        - KUKA_KR6_R900_2
        - KUKA_KR6_R1820
        - KUKA_KR10_R900
        - KUKA_KR10_R900_2
        - KUKA_KR10_R1100
        - KUKA_KR10_R1100_2
        - KUKA_KR12_R1810_2
        - KUKA_KR16_R1610
        - KUKA_KR16_R1610_2
        - KUKA_KR16_R2010
        - KUKA_KR16_R2010_2
        - KUKA_KR20_R1810
        - KUKA_KR20_R1810_2
        - KUKA_KR30_R3
        - KUKA_KR50_R2500
        - KUKA_KR120_R2700
        - KUKA_KR120_R2700_2
        - KUKA_KR120_R3100_2
        - KUKA_KR210_R2700
        - KUKA_KR210_R2700_2
        - KUKA_KR210_R3100
        - KUKA_KR210_R3100_2
        - KUKA_KR210_R3300
        - KUKA_KR210_R3300_2
        - KUKA_KR240_R2700
        - KUKA_KR250_R2700_2
        - KUKA_KR270_R2700
        - KUKA_KR270_R3100
        - KUKA_KR270_R3100_2
        - KUKA_KR360_R2830
        - KUKA_KR360_L240_3
        - KUKA_LBR_IISY_11_R1300
    PlannerPose:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Vector3d'
        orientation:
          $ref: '#/components/schemas/Vector3d'
    PlanningLimits_LimitRange:
      required:
        - upper_limit
        - lower_limit
      type: object
      properties:
        lower_limit:
          type: number
          format: double
        upper_limit:
          type: number
          format: double
      description: The upper_limit must be greater then the lower_limit.
    PlanningLimits:
      type: object
      properties:
        joint_position_limits:
          type: array
          items:
            $ref: '#/components/schemas/PlanningLimits_LimitRange'
          description: |
            Joint position limits in [rad], configured in the safety setup, starting
            at base.
        joint_velocity_limits:
          type: array
          items:
            type: number
            format: double
          description: |
            Maximum allowed velocity for joints in [rad/s or mm/s] of the safety setup,
            starting at base.
        joint_acceleration_limits:
          type: array
          items:
            type: number
            format: double
          description: |
            Maximum allowed acceleration for joints in [rad/s^2 or mm/s^2] of the safety
            setup, starting at base.
        joint_torque_limits:
          type: array
          items:
            type: number
            format: double
          description: |
            Maximum allowed torque for joints in [Nm or N] of the safety setup, starting
            at base.
        tcp_velocity_limit:
          type: number
          description: |
            At maximum one dimensional velocity in [mm/s] at TCP allowed.
          format: double
        tcp_acceleration_limit:
          type: number
          description: |
            At maximum one dimensional acceleration in [mm/s^2] at TCP allowed.
          format: double
        tcp_orientation_velocity_limit:
          type: number
          description: |
            At maximum one dimensional orientation velocity in [rad/s] at TCP allowed.
          format: double
        tcp_orientation_acceleration_limit:
          type: number
          description: |
            At maximum one dimensional orientation acceleration in [rad/s^2] at TCP allowed.
          format: double
        tcp_force_limit:
          type: number
          description: |
            At maximum one dimensional force in [N] at TCP allowed.
          format: double
        elbow_velocity_limit:
          type: number
          description: |
            At maximum one dimensional velocity in [mm/s] at the elbow allowed.
          format: double
        elbow_acceleration_limit:
          type: number
          description: |
            At maximum one dimensional acceleration in [mm/s^2] at the elbow allowed.
          format: double
        elbow_force_limit:
          type: number
          description: |
            At maximum one dimensional force in [N] at the elbow allowed.
          format: double
      description: All known joint and cartesian limits of a motion-group. Used for motion planning.
    SafetyZoneLimits:
      required:
        - safety_zone
        - limits
      type: object
      properties:
        safety_zone:
          type: integer
          format: uint32
        limits:
          $ref: '#/components/schemas/PlanningLimits'
      description: All limits which apply within a single safety zone.
    Sphere:
      required:
        - radius
      type: object
      properties:
        radius:
          type: number
          description: The radius of the sphere in [mm].
          format: double
      description: Defines a spherical shape centered around an origin.
    Box:
      required:
        - size_x
        - size_y
        - size_z
        - type
      type: object
      properties:
        size_x:
          type: number
          description: The dimension in x direction in [mm].
          format: double
        size_y:
          type: number
          description: The dimension in y direction in [mm].
          format: double
        size_z:
          type: number
          description: The dimension in z direction in [mm].
          format: double
        type:
          enum:
            - TYPE_HOLLOW
            - TYPE_FULL
          type: string
          description: The type defines if the box is hollow or not.
          format: enum
      description: Defines a cuboid shape centered around an origin.
    Rectangle:
      required:
        - size_x
        - size_y
      type: object
      properties:
        size_x:
          type: number
          description: The dimension in x direction in [mm].
          format: double
        size_y:
          type: number
          description: The dimension in y direction in [mm].
          format: double
      description: Defines an x-y plane with finite size.
    Plane:
      type: object
      properties: {}
      description: Defines an x-y plane with infinite size.
    Cylinder:
      required:
        - radius
        - height
      type: object
      properties:
        radius:
          type: number
          description: The radius of the cylinder in [mm].
          format: double
        height:
          type: number
          description: The height of the cylinder in [mm].
          format: double
      description: Defines a cylindrical shape centered around the z-axis.
    Vertex:
      required:
        - vertex
      type: object
      properties:
        vertex:
          $ref: '#/components/schemas/Vector3d'
    ConvexHull:
      required:
        - vertices
      type: object
      properties:
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/Vertex'
          description: The list of encapsulated points.
      description: Defines a convex hull encapsulating a set of vertices.
    Capsule:
      required:
        - radius
        - cylinder_height
      type: object
      properties:
        radius:
          type: number
          description: The radius of the cylinder and semi-spheres in [mm].
          format: double
        cylinder_height:
          type: number
          description: The height of the inner cylinder in [mm].
          format: double
      description: Defines a cylinder like shape with 2 semi-spheres on top and bottom.
    RectangularCapsule:
      required:
        - radius
        - sphere_center_distance_x
        - sphere_center_distance_y
      type: object
      properties:
        radius:
          type: number
          description: The radius of the inner spheres in [mm].
          format: double
        sphere_center_distance_x:
          type: number
          description: The distance of the sphere center in x direction in [mm].
          format: double
        sphere_center_distance_y:
          type: number
          description: The distance of the sphere center in y direction in [mm].
          format: double
      description: |
        A convex hull around four spheres. Sphere center points in x-y-plane, offset
        by either combination +-sizeX/+-sizeY. Alternative description: Rectangle in
        x-y-plane with a 3D padding.
    Geometry:
      required:
        - init_pose
      type: object
      properties:
        sphere:
          $ref: '#/components/schemas/Sphere'
        box:
          $ref: '#/components/schemas/Box'
        rectangle:
          $ref: '#/components/schemas/Rectangle'
        plane:
          $ref: '#/components/schemas/Plane'
        cylinder:
          $ref: '#/components/schemas/Cylinder'
        convex_hull:
          $ref: '#/components/schemas/ConvexHull'
        capsule:
          $ref: '#/components/schemas/Capsule'
        rectangular_capsule:
          $ref: '#/components/schemas/RectangularCapsule'
        compound:
          $ref: '#/components/schemas/Compound'
        init_pose:
          $ref: '#/components/schemas/PlannerPose'
        id:
          type: string
          description: |
            An identifier may be used to refer to this geometry, e.g. when giving
            feedback.
      description: A Geometry is defined by a shape and a pose.
    Compound:
      required:
        - child_geometries
      type: object
      properties:
        child_geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
          description: A list of geometries sharing the same reference frame.
      description: |
        Describes a collision shape compounded from multiple collision objects. All
        objects are described in the compound's reference frame.
    SafetyZone:
      required:
        - id
        - priority
        - geometry
      type: object
      properties:
        id:
          type: integer
          description: A unique identifier.
          format: uint32
        priority:
          type: integer
          description: The precedence if multiple zones overlap.
          format: uint32
        geometry:
          $ref: '#/components/schemas/Geometry'
      description: A zone where the MotionGroup cannot enter or certain limits apply.
    RobotLinkGeometry:
      required:
        - link_index
        - geometry
      type: object
      properties:
        link_index:
          type: integer
          description: |
            Determines how many sets of DH-parameter are applied to get from robot
            base coordinate system to the link coordinate system in which the geometry
            is defined.
          format: uint32
        geometry:
          $ref: '#/components/schemas/Geometry'
      description: Describes a geometry encapsulating a given link from a robot.
    SafetyConfiguration:
      required:
        - global_limits
      type: object
      properties:
        global_limits:
          $ref: '#/components/schemas/PlanningLimits'
        safety_zone_limits:
          type: array
          items:
            $ref: '#/components/schemas/SafetyZoneLimits'
          description: All limits applied in certain SafetyZones.
        safety_zones:
          type: array
          items:
            $ref: '#/components/schemas/SafetyZone'
          description: SafetyZones are areas which cannot be entered or impose certain limits.
        robot_model_geometries:
          type: array
          items:
            $ref: '#/components/schemas/RobotLinkGeometry'
          description: The shape of the motion-group to validate against SafetyZones.
        tcp_geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
          description: The shape of the TCP to validate against SafetyZones.
      description: The safety configuration of a motion-group. Used for motion planning.
    Payload:
      required:
        - name
        - payload
      type: object
      properties:
        name:
          type: string
          description: Unique identifier of the payload.
        payload:
          type: number
          description: Mass of payload in [kg].
          format: double
        center_of_mass:
          $ref: '#/components/schemas/Vector3d'
        moment_of_inertia:
          $ref: '#/components/schemas/Vector3d'
    DHParameter:
      type: object
      properties:
        alpha:
          type: number
          description: Angle about x-axis in [rad].
          format: double
        theta:
          type: number
          description: Angle about z-axis in [rad].
          format: double
        a:
          type: number
          description: Offset along x-axis in [mm].
          format: double
        d:
          type: number
          description: Offset along z-axis in [mm].
          format: double
        reverse_rotation_direction:
          type: boolean
          description: True, if rotation direction of joint is reversed.
      description: A single set of DH parameters.
    OptimizerSetup:
      required:
        - motion_group_type
        - mounting
        - tcp
        - safety_setup
      type: object
      properties:
        motion_group_type:
          $ref: '#/components/schemas/MotionGroupModel'
        mounting:
          $ref: '#/components/schemas/PlannerPose'
          description: The offset from the world frame to the motion group base.
        tcp:
          $ref: '#/components/schemas/PlannerPose'
          description: The offset from the motion group flange to the tool center point.
        safety_setup:
          $ref: '#/components/schemas/SafetyConfiguration'
          description: The limits, safety zones and collision models of the motion group and tool.
        payload:
          $ref: '#/components/schemas/Payload'
          description: The dynamic parameters (mass, inertias, center of gravity) of the payload located at the tool center point.
        cycle_time:
          type: integer
          format: uint32
          description: '[ms] cycle time of the motion group controller. A trajectory for this motion group should be computed to this resolution.'
        dh_parameters:
          type: array
          items:
            $ref: '#/components/schemas/DHParameter'
          description: The DH parameters describing the motion group geometry, starting from base.
      description: The configuration of a motion-group used for motion planning.
    ListPayloadsResponse:
      type: object
      properties:
        payloads:
          type: array
          items:
            $ref: '#/components/schemas/Payload'
    SafetyType:
      enum:
        - SAFETY_INVALID
        - SAFETY_NORMAL
        - SAFETY_REDUCED
      type: string
      description: The safety state that the settings are valid for.
      format: enum
    JointName:
      enum:
        - JOINTNAME_AXIS_INVALID
        - JOINTNAME_AXIS_1
        - JOINTNAME_AXIS_2
        - JOINTNAME_AXIS_3
        - JOINTNAME_AXIS_4
        - JOINTNAME_AXIS_5
        - JOINTNAME_AXIS_6
        - JOINTNAME_AXIS_7
        - JOINTNAME_AXIS_8
        - JOINTNAME_AXIS_9
        - JOINTNAME_AXIS_10
        - JOINTNAME_AXIS_11
        - JOINTNAME_AXIS_12
      type: string
      description: Definition of the joint where the limits are applied.
      format: enum
    JointLimit:
      required:
        - joint
        - lower_limit
        - upper_limit
      type: object
      properties:
        joint:
          $ref: '#/components/schemas/JointName'
        lower_limit:
          type: number
          description: Lower joint limit which is smaller than the upper joint limit.
          format: double
        upper_limit:
          type: number
          description: Upper joint boundary which is bigger than the lower joint limit.
          format: double
        unlimited:
          type: boolean
          description: True, if joint limit is unlimited. Lower and upper limits are ignored.
      description: |
        A joint limit can contain a position (rad or mm), a velocity (rad/s or mm/s),
        an acceleration (rad/sÂ² or mm/sÂ²) or a jerk (rad/sÂ³ or mm/sÂ³).
    SingleJointLimit:
      required:
        - joint
        - limit
      type: object
      properties:
        joint:
          $ref: '#/components/schemas/JointName'
        limit:
          type: number
          description: Limit, unit depends on usage of this message structure.
          format: double
      description: |
        A joint limit can contain a position (rad or mm), a velocity (rad/s or mm/s),
        an acceleration (rad/sÂ² or mm/sÂ²) or a jerk (rad/sÂ³ or mm/sÂ³).
    LimitSettings:
      type: object
      properties:
        joint_position_limits:
          type: array
          items:
            $ref: '#/components/schemas/JointLimit'
          description: |
            Joint position limits in [rad or mm], configured in the safety setup,
            starting at base.
        joint_velocity_limits:
          type: array
          items:
            $ref: '#/components/schemas/SingleJointLimit'
          description: |
            Max allowed velocity for joints in [rad/s or mm/s] of the safety setup,
            starting at base.
        joint_acceleration_limits:
          type: array
          items:
            $ref: '#/components/schemas/SingleJointLimit'
          description: |
            Max allowed acceleration for joints in [rad/s^2 or mm/s^2] of the safety
            setup, starting at base.
        joint_torque_limits:
          type: array
          items:
            $ref: '#/components/schemas/SingleJointLimit'
          description: |
            Max allowed torque for joints in [Nm or N] of the safety setup, starting
            at base.
        tcp_velocity_limit:
          type: number
          description: '[mm/s] max. allowed velocity at the TCP, 1-dimensional.'
          format: double
        tcp_acceleration_limit:
          type: number
          description: '[mm/s^2] max. allowed acceleration at the TCP, 1-dimensional.'
          format: double
        tcp_orientation_velocity_limit:
          type: number
          description: '[rad/s] max. allowed orientation velocity at the TCP, 1-dimensional.'
          format: double
        tcp_orientation_acceleration_limit:
          type: number
          description: '[rad/s^2] max. allowed orientation acceleration at the TCP, 1-dimensional.'
          format: double
        tcp_force_limit:
          type: number
          description: '[N] max. allowed force at the TCP, 1-dimensional.'
          format: double
        elbow_velocity_limit:
          type: number
          description: '[mm/s] max. allowed velocity at the elbow, 1-dimensional.'
          format: double
        elbow_acceleration_limit:
          type: number
          description: '[mm/s^2] max. allowed acceleration at the elbow, 1-dimensional.'
          format: double
        elbow_force_limit:
          type: number
          description: '[N] max. allowed force at the elbow, 1-dimensional.'
          format: double
      description: |
        NOTE: if a joint or Cartesian limit is not set or present for the
        corresponding device, then the value is not present (in the list or the
        optional value is null). The unit depends on the kind of axis (rotational or
        linear).
    SafetySetup_SafetySettings:
      type: object
      properties:
        safety_state:
          $ref: '#/components/schemas/SafetyType'
        settings:
          $ref: '#/components/schemas/LimitSettings'
      description: Restricts the robot movements due to the safety configuration.
    SafetySetup_SafetyZone:
      type: object
      properties:
        id:
          type: integer
          description: A unique identifier.
          format: uint32
        priority:
          type: integer
          description: The precedence if two zones overlap.
          format: uint32
        geometry:
          $ref: '#/components/schemas/Geometry'
        motion_group_uid:
          type: integer
          description: |-
            Unique identifier of an specific motion-group if the safety zone only applies to it.
            If it is not set, then the safety zone applies to all motion-groups.
          format: uint32
      description: Describes the physical space in which the safety limitations will be applied.
    ToolGeometry:
      required:
        - tcp
        - geometry
      type: object
      properties:
        tcp:
          type: string
          description: Identifier of this tcp.
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
          description: The shape of the tool to validate against SafetyZones.
      description: Describes a geometry encapsulating a given tool from a robot.
    SafetySetup:
      type: object
      properties:
        safety_settings:
          type: array
          items:
            $ref: '#/components/schemas/SafetySetup_SafetySettings'
        safety_zones:
          type: array
          items:
            $ref: '#/components/schemas/SafetySetup_SafetyZone'
        robot_model_geometries:
          type: array
          items:
            $ref: '#/components/schemas/RobotLinkGeometry'
        tool_geometries:
          type: array
          items:
            $ref: '#/components/schemas/ToolGeometry'
    MotionGroupSpecification:
      type: object
      properties:
        dh_parameters:
          type: array
          items:
            $ref: '#/components/schemas/DHParameter'
          description: |
            A list of DH (Denavit-Hartenberg) parameters.
            An element in this list contains a set of DH parameters that describe the relation of two cartesian reference frames.
            Every joint of a serial motion group has an associated cartesian reference frame located in the rotation axis of the joint.
            A set of DH parameters is applied in the following order: theta, d, a, alpha.
        mechanical_joint_limits:
          type: array
          items:
            $ref: '#/components/schemas/JointLimit'
          description: |
            Mechanical joint limits in [rad/mm], starting with the first joint in the motion group base.
            For every joint there is a minimum and maximum value.
            Those are defined by the motion group manufacturer and can be found in its data sheet.
            If a mechanical joint limit is exceeded, the motion group stops immediately. The stop is triggered by the physical robot controller.
            This should be prevented by using proper soft joint limits.
      description: Holding static properties of the motion group.
    RobotTcp:
      required:
        - id
        - position
      type: object
      properties:
        id:
          type: string
          description: Identifier of this tcp.
        readable_name:
          type: string
          description: A readable and changeable name for frontend visualization.
        position:
          $ref: '#/components/schemas/Vector3d'
        orientation:
          $ref: '#/components/schemas/Orientation'
        orientation_type:
          $ref: '#/components/schemas/OrientationType'
    ListTcpsResponse:
      type: object
      properties:
        tcps:
          type: array
          items:
            $ref: '#/components/schemas/RobotTcp'
          description: |
            Represents the tcp offset from the device flange (in other words the
            absolute transformation from flange to the tcp).
    DoubleArray:
      type: array
      items:
        type: number
        format: double
    BlendingAuto:
      title: Auto-Blending
      type: object
      properties:
        min_velocity_in_percent:
          type: integer
          format: uint32
          description: |
            Auto-blending is used to keep a constant velocity when blending between two motion commands.
            It changes the TCP path around the target point of the motion command.
            The value represents the percentage of the original velocity.
        blending_name:
          type: string
          const: BlendingAuto
      required:
        - blending_name
    BlendingPosition:
      title: Position-Blending
      type: object
      properties:
        position_zone_radius:
          type: number
          format: double
          description: |
            Specifies the maximum radius in [mm] around the motion command's target point
            where the TCP path can be altered to blend the motion command into the following one.
            If auto-blending blends too much of the resulting trajectory, use position-blending to restrict the blending zone radius.
        blending_name:
          type: string
          const: BlendingPosition
      required:
        - blending_name
    LimitsOverride:
      type: object
      properties:
        joint_velocity_limits:
          $ref: '#/components/schemas/Joints'
          description: |
            Maximum joint velocity in [rad/s] for each joint.
            Either leave this field empty or set a value for each joint.
        joint_acceleration_limits:
          $ref: '#/components/schemas/Joints'
          description: |
            Maximum joint acceleration in [rad/s^2] for each joint.
            Either leave this field empty or set a value for each joint.
        tcp_velocity_limit:
          type: number
          format: double
          description: |
            Maximum allowed TCP velocity in [mm/s].
        tcp_acceleration_limit:
          type: number
          format: double
          description: |
            Maximum allowed TCP acceleration in [mm/s^2].
        tcp_orientation_velocity_limit:
          type: number
          format: double
          description: |
            Maximum allowed TCP rotation velocity in [rad/s].
        tcp_orientation_acceleration_limit:
          type: number
          format: double
          description: |
            Maximum allowed TCP rotation acceleration in [rad/s^2].
      description: |
        If a limit is not set, the default value will be used.
    Pose:
      title: Pose
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Vector3d'
        orientation:
          $ref: '#/components/schemas/RotationVector'
      default:
        position:
          - 0
          - 0
          - 0
        orientation:
          - 0
          - 0
          - 0
      description: |
        Defines a pose in 3D space.
        A pose is a combination of a position and an orientation.
        The position is applied before the orientation.
    PathCartesianPTP:
      title: CartesianPTP
      type: object
      required:
        - target_pose
        - path_definition_name
      properties:
        target_pose:
          $ref: '#/components/schemas/Pose'
        path_definition_name:
          type: string
          const: PathCartesianPTP
      description: |
        A cartesian point-to-point is representing a joint point-to-point motion from start point to the indicated target pose.
        The target pose is a joint point-to-point given in cartesian space. The target joint configuration will be calculated
        to be in the same kinematic configuration as the start point is. If that is not possible, planning will fail.
    CubicSplineParameter:
      title: CubicSplineParameter
      required:
        - pose
        - path_parameter
      type: object
      properties:
        pose:
          $ref: '#/components/schemas/Pose'
        path_parameter:
          type: number
          format: double
    PathCubicSpline:
      title: CubicSpline
      required:
        - parameters
        - path_definition_name
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/CubicSplineParameter'
        path_definition_name:
          type: string
          const: PathCubicSpline
      description: |
        A [cubic spline](https://de.wikipedia.org/wiki/Spline-Interpolation) represents a cartesian cubic spline
        in translative and orientational space from start point to indicated target pose via control points.
    PathLine:
      title: Line
      type: object
      required:
        - target_pose
        - path_definition_name
      properties:
        target_pose:
          $ref: '#/components/schemas/Pose'
        path_definition_name:
          type: string
          const: PathLine
      description: |
        A line represents a straight line from start position to indicated target position.
        The orientation is calculated via a quaternion [slerp](https://en.wikipedia.org/wiki/Slerp) from start orientation to indicated target orientation.
    PathCircle:
      title: Circle
      type: object
      required:
        - via_pose
        - target_pose
        - path_definition_name
      properties:
        via_pose:
          $ref: '#/components/schemas/Pose'
        target_pose:
          $ref: '#/components/schemas/Pose'
        path_definition_name:
          type: string
          const: PathCircle
      description: |
        A circular constructs a circle in translative space from 1) the start position which is provided via position, and 2) the indicated target position.
        The orientation is calculated via a [bezier spline](https://en.wikipedia.org/wiki/B%C3%A9zier_curve) from start orientation to the indicated target orientation.
        The via point defines the control point for the bezier spline.
        Therefore, the control point will not be hit directly.
    PathJointPTP:
      title: JointPTP
      type: object
      required:
        - target_joint_position
        - path_definition_name
      properties:
        target_joint_position:
          $ref: '#/components/schemas/DoubleArray'
        path_definition_name:
          type: string
          const: PathJointPTP
      description: |
        A joint point-to-point represents a line in joint space. All joints will be moved synchronously.
    MotionCommand:
      title: MotionCommand
      type: object
      required:
        - path
      properties:
        blending:
          oneOf:
            - $ref: '#/components/schemas/BlendingAuto'
            - $ref: '#/components/schemas/BlendingPosition'
          discriminator:
            propertyName: blending_name
          description: |
            Blending alters the TCP path at the target point of a motion command
            to ensure that the velocity does not drop to zero between two motion commands.
        limits_override:
          $ref: '#/components/schemas/LimitsOverride'
          description: |
            Limits override is used to override the global limits of the motion group for this segment of the motion.
        path:
          oneOf:
            - $ref: '#/components/schemas/PathCartesianPTP'
            - $ref: '#/components/schemas/PathCubicSpline'
            - $ref: '#/components/schemas/PathLine'
            - $ref: '#/components/schemas/PathCircle'
            - $ref: '#/components/schemas/PathJointPTP'
          discriminator:
            propertyName: path_definition_name
    Sphere-2:
      title: Sphere
      type: object
      properties:
        shape_type:
          type: string
          const: sphere
        radius:
          type: number
          format: double
          description: The radius of the sphere in [mm].
      required:
        - shape_type
        - radius
      description: Defines a spherical shape centred around the origin.
    Box-2:
      title: Box
      type: object
      properties:
        shape_type:
          type: string
          const: box
        size_x:
          type: number
          format: double
          description: The dimension in x-direction in [mm].
        size_y:
          type: number
          format: double
          description: The dimension in y-direction in [mm].
        size_z:
          type: number
          format: double
          description: The dimension in z-direction in [mm].
        box_type:
          type: string
          enum:
            - HOLLOW
            - FULL
          default: FULL
          description: The box type defines if the box is hollow or full.
      required:
        - shape_type
        - size_x
        - size_y
        - size_z
        - box_type
      description: |
        Defines a cuboid shape centred around an origin.

        If a margin is applied to the box type full, it is added to all size values. The shape will keep its edges.
        The hollow box type consists of thin boxes that make up its walls.
        If a margin is applied to the box type hollow, its size values are reduced by the margin.
    Rectangle-2:
      title: Rectangle
      type: object
      properties:
        shape_type:
          type: string
          const: rectangle
        size_x:
          type: number
          format: double
          description: The dimension in x-direction in [mm].
        size_y:
          type: number
          format: double
          description: The dimension in y-direction in [mm].
      required:
        - shape_type
        - size_x
        - size_y
      description: Defines an x/y-plane with finite size. Centred around the z-axis.
    Plane-2:
      title: Plane
      type: object
      properties:
        shape_type:
          type: string
          const: plane
      required:
        - shape_type
      description: Defines an x/y-plane with infinite size.
    Cylinder-2:
      title: Cylinder
      type: object
      properties:
        shape_type:
          type: string
          const: cylinder
        radius:
          type: number
          format: double
          description: The radius of the cylinder in [mm].
        height:
          type: number
          format: double
          description: The height of the cylinder in [mm].
      required:
        - shape_type
        - radius
        - height
      description: |
        Defines a cylindrical shape.
        Centred around origin, symmetric around z-axis.

        If a margin is applied, it is added to radius and height. The shape will keep its edges.
    Capsule-2:
      title: Capsule
      type: object
      properties:
        shape_type:
          type: string
          const: capsule
        radius:
          type: number
          format: double
          description: The radius of the cylinder and semi-spheres in [mm].
        cylinder_height:
          type: number
          format: double
          description: The height of the inner cylinder in [mm].
      required:
        - shape_type
        - radius
        - cylinder_height
      description: |
        Defines a cylindrical shape with 2 semi-spheres on the top and bottom.
        Centred around origin, symmetric around z-axis.
    RectangularCapsule-2:
      title: Rectangular Capsule
      type: object
      properties:
        shape_type:
          type: string
          const: rectangular_capsule
        radius:
          type: number
          format: double
          description: The radius of the inner spheres in [mm].
        sphere_center_distance_x:
          type: number
          format: double
          description: The distance of the sphere center in x-direction in [mm].
        sphere_center_distance_y:
          type: number
          format: double
          description: The distance of the sphere center in y-direction in [mm].
      required:
        - shape_type
        - radius
        - sphere_center_distance_x
        - sphere_center_distance_y
      description: |
        Convex hull around four spheres. Sphere center points in x/y-plane, offset by either combination "+/- sizeX" or "+/- sizeY".

        Alternative description: Rectangle in x/y-plane with a 3D padding.
    ConvexHull-2:
      title: Convex Hull
      type: object
      properties:
        shape_type:
          type: string
          const: convex_hull
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/Vector3d'
          description: The list of encapsulated points.
      required:
        - shape_type
        - vertices
      description: Defines a convex hull encapsulating a set of vertices.
    Collider:
      title: Collider
      type: object
      description: |
        Defines a collider with a single shape.

        A collider is an object that is used for collision detection.
        It defines the `shape` that is attached with the offset of `pose` to a reference frame.

        Use colliders to:
        - Define the shape of a workpiece. The reference frame is the scene origin.
        - Define the shape of a link in a motion group. The reference frame is the link coordinate system.
        - Define the shape of a tool. The reference frame is the flange coordinate system.
      properties:
        shape:
          oneOf:
            - $ref: '#/components/schemas/Sphere-2'
            - $ref: '#/components/schemas/Box-2'
            - $ref: '#/components/schemas/Rectangle-2'
            - $ref: '#/components/schemas/Plane-2'
            - $ref: '#/components/schemas/Cylinder-2'
            - $ref: '#/components/schemas/Capsule-2'
            - $ref: '#/components/schemas/RectangularCapsule-2'
            - $ref: '#/components/schemas/ConvexHull-2'
          discriminator:
            propertyName: shape_type
            mapping:
              sphere: '#/components/schemas/Sphere-2'
              box: '#/components/schemas/Box-2'
              rectangle: '#/components/schemas/Rectangle-2'
              plane: '#/components/schemas/Plane-2'
              cylinder: '#/components/schemas/Cylinder-2'
              capsule: '#/components/schemas/Capsule-2'
              rectangular_capsule: '#/components/schemas/RectangularCapsule-2'
              convex_hull: '#/components/schemas/ConvexHull-2'
        pose:
          $ref: '#/components/schemas/Pose'
        margin:
          type: number
          description: Increases the shape's size in all dimensions. Applied in [mm]. Can be used to keep a safe distance to the shape.
          format: float
          default: 0
      required:
        - shape
      examples:
        - shape:
            shape_type: sphere
            radius: 10
    ColliderDictionary:
      type: object
      title: ColliderDictionary
      description: A collection of identifiable colliders.
      additionalProperties:
        $ref: '#/components/schemas/Collider'
    Link:
      type: object
      title: Collision Motion Group Link
      additionalProperties:
        $ref: '#/components/schemas/Collider'
    LinkChain:
      title: Link Chain
      type: array
      description: |
        A link chain is a kinematic chain of links that is connected via joints.
        A motion group can be used to control the motion of the joints in a link chain.

        A link is a group of colliders that is attached to the link reference frame.

        The reference frame of a link is obtained after applying all sets of Denavit-Hartenberg-parameters from base to (including) the link index.

        This means that the reference frame of the link is on the rotation axis of the next joint in the kinematic chain.
        Example: For a motion group with 2 joints, the collider reference frame (CRF) for link 1 is on the rotation axis of joint 2. The chain looks like:
        - Origin >> Mounting >> Base >> (CRF Base) Joint 0 >> Link 0 >> (CRF Link 0) Joint 1 >> Link 1 >> (CRF Link 1) Flange (CRF Tool) >> TCP

        Adjacent links in the kinematic chain of the motion group are not checked for mutual collision.
      items:
        $ref: '#/components/schemas/Link'
      examples:
        - - link_0_sphere:
              shape:
                shape_type: sphere
                radius: 10
              pose:
                position:
                  - 0
                  - 0
                  - -10
            link_0_capsule:
              shape:
                shape_type: capsule
                radius: 5
                cylinder_height: 20
          - {}
          - link_2_capsule:
              shape:
                shape_type: capsule
                radius: 5
                cylinder_height: 20
    Tool:
      type: object
      title: Collision Motion Group Tool
      description: |
        Defines the shape of a tool.

        A tool is a dictionary of colliders.

        All colliders that make up a tool are attached to the flange frame of the motion group.
      additionalProperties:
        $ref: '#/components/schemas/Collider'
    CollisionMotionGroup:
      title: Collision Motion Group
      type: object
      properties:
        link_chain:
          $ref: '#/components/schemas/LinkChain'
        tool:
          $ref: '#/components/schemas/Tool'
      examples:
        - link_chain:
            - link_0_sphere:
                shape:
                  shape_type: sphere
                  radius: 10
                pose:
                  position:
                    - 0
                    - 0
                    - -10
              link_0_capsule:
                shape:
                  shape_type: capsule
                  radius: 5
                  cylinder_height: 20
            - {}
            - link_2_capsule:
                shape:
                  shape_type: capsule
                  radius: 5
                  cylinder_height: 20
          tool:
            - shape:
                shape_type: box
                size_x: 0.1
                size_y: 0.1
                size_z: 0.9
                box_type: FULL
              pose:
                position:
                  - 30
                  - 0
                  - 0
                orientation:
                  - 0
                  - 1.2
                  - 0
              margin: 10
    PlanTrajectoryRequest:
      title: PlanTrajectoryRequest
      type: object
      required:
        - robot_setup
        - start_joint_position
        - motion_commands
      properties:
        robot_setup:
          $ref: '#/components/schemas/OptimizerSetup'
          description: The robot setup as returned from [getOptimizerConfiguration](getOptimizerConfiguration) endpoint.
        start_joint_position:
          $ref: '#/components/schemas/DoubleArray'
          description: |
            To define a motion the start joints have to be indicated.
            Cartesian movements will be in the same kinematic configuration as the start joint position until the first joint point-to-point motion.
            Motions can only be executed if the start joint position is the current joint position of the motion group.
            To retrieve the current joint position use the endpoint [getCurrentMotionGroupState](getCurrentMotionGroupState).
            To move the robot to the start joint position use the endpoint [streamMoveToTrajectoryViaJointP2P](streamMoveToTrajectoryViaJointP2P).
        motion_commands:
          type: array
          items:
            $ref: '#/components/schemas/MotionCommand'
          description: |
            List of motion commands. A command consists of a path definition (line, circle, joint_ptp, cartesian_ptp, cubic_spline), blending, and limits override.
        static_colliders:
          $ref: '#/components/schemas/ColliderDictionary'
          description: |
            Static colliders considered during the motion planning.
        collision_motion_group:
          $ref: '#/components/schemas/CollisionMotionGroup'
          description: |
            Collision motion group considered during the motion planning.
    JointTrajectory:
      title: JointTrajectory
      required:
        - joint_positions
        - times
        - locations
      type: object
      properties:
        joint_positions:
          type: array
          items:
            $ref: '#/components/schemas/Joints'
          description: |
            List of joint positions [rad] for each sample.
            The number of samples must match the number of timestamps provided in the times field.
        times:
          type: array
          items:
            type: number
            format: double
          description: Timestamp for each sample [s].
        locations:
          type: array
          items:
            type: number
            format: double
          description: |
            Location for each sample, scalar value defining a position along a path. Typical range: 0 to `n`, `n` denoting the number of motion commands.
            Each integer value of the location corresponds to a specific motion command.
            If provided, the number of samples must match the number of timestamps provided in the times field.
    FeedbackOutOfWorkspace:
      title: OutOfWorkspace
      type: object
      properties:
        invalid_tcp_pose:
          $ref: '#/components/schemas/Pose'
        error_feedback_name:
          type: string
          const: FeedbackOutOfWorkspace
      description: Requested TCP pose is outside of motion group's workspace.
      required:
        - error_feedback_name
    SingularityTypeEnum:
      type: string
      enum:
        - WRIST
        - ELBOW
        - SHOULDER
    FeedbackSingularity:
      title: Singularity
      type: object
      properties:
        singularity_type:
          $ref: '#/components/schemas/SingularityTypeEnum'
        singular_joint_position:
          $ref: '#/components/schemas/DoubleArray'
        error_feedback_name:
          type: string
          const: FeedbackSingularity
      description: |
        A singularity is a point in the robot's workspace where the robot loses one or more degrees of freedom with regards to moving its TCP.
        This means the robot cannot move or rotate the TCP in a certain direction from this specific point.

        Use PTP motions if possible. They will almost never fail due to singularities (only if the target point is at a singularity).

        Alternatively change the robot TCP's path to avoid moving through this point or try to move the TCP through this point in a different direction.
      required:
        - error_feedback_name
    FeedbackJointLimitExceeded:
      title: JointLimitExceeded
      type: object
      properties:
        joint_index:
          type: integer
          format: uint32
        joint_position:
          $ref: '#/components/schemas/DoubleArray'
        error_feedback_name:
          type: string
          const: FeedbackJointLimitExceeded
      description: |
        This error is returned when a joint position limit is exceeded.
        The joint index denotes which joint is out of its limits, starting with 1 and followed by the full joint position.
      required:
        - error_feedback_name
    CollisionContact:
      title: CollisionContact
      type: object
      properties:
        local:
          $ref: '#/components/schemas/Vector3d'
        world:
          $ref: '#/components/schemas/Vector3d'
    Collision:
      title: Collision
      type: object
      properties:
        id_of_a:
          type: string
        id_of_b:
          type: string
        id_of_world:
          type: string
        normal_world_on_b:
          $ref: '#/components/schemas/Vector3d'
        position_on_a:
          $ref: '#/components/schemas/CollisionContact'
        position_on_b:
          $ref: '#/components/schemas/CollisionContact'
    FeedbackCollision:
      title: CollisionFeedback
      type: object
      properties:
        collisions:
          type: array
          items:
            $ref: '#/components/schemas/Collision'
        joint_position:
          $ref: '#/components/schemas/DoubleArray'
        tcp_pose:
          $ref: '#/components/schemas/Pose'
        error_feedback_name:
          type: string
          const: FeedbackCollision
      required:
        - error_feedback_name
    PlanTrajectoryFailedResponse:
      title: PlanTrajectoryFailedResponse
      type: object
      required:
        - error_feedback
        - location
      properties:
        error_feedback:
          oneOf:
            - $ref: '#/components/schemas/FeedbackOutOfWorkspace'
            - $ref: '#/components/schemas/FeedbackSingularity'
            - $ref: '#/components/schemas/FeedbackJointLimitExceeded'
            - $ref: '#/components/schemas/FeedbackCollision'
          discriminator:
            propertyName: error_feedback_name
        error_location_on_trajectory:
          type: number
          format: double
        joint_trajectory:
          $ref: '#/components/schemas/JointTrajectory'
          description: |
            The joint trajectory from the start joint position to the error.
    PlanTrajectoryResponse:
      title: PlanTrajectoryResponse
      type: object
      required:
        - response
      properties:
        response:
          oneOf:
            - $ref: '#/components/schemas/JointTrajectory'
            - $ref: '#/components/schemas/PlanTrajectoryFailedResponse'
    ValidationError:
      properties:
        loc:
          items:
            oneOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    InverseKinematicsRequest:
      title: InverseKinematicsRequest
      type: object
      required:
        - robot_setup
        - tcp_poses
      properties:
        robot_setup:
          $ref: '#/components/schemas/OptimizerSetup'
          description: The robot setup as returned from [getOptimizerConfiguration](getOptimizerConfiguration).
        tcp_poses:
          type: array
          items:
            $ref: '#/components/schemas/Pose'
          description: |
            List of TCP poses for which the inverse solutions are computed.
        static_colliders:
          $ref: '#/components/schemas/ColliderDictionary'
          description: |
            Static colliders describing the static environment.
        collision_motion_group:
          $ref: '#/components/schemas/CollisionMotionGroup'
          description: |
            Collision motion group.
    InverseKinematicsResponse:
      title: InverseKinematicsResponse
      type: object
      required:
        - joints
      properties:
        joints:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/DoubleArray'
    ListTrajectoriesResponse:
      type: object
      properties:
        trajectories:
          type: array
          items:
            type: string
          description: |
            Identifiers of trajectories which are currently cached.
            Use [addTrajectory](addTrajectory) to add a new trajectory. Adding trajectories is necessary to execute them.
            Trajectories are removed if the corresponding motion group or controller disconnects.
    AddTrajectoryRequest:
      type: object
      required:
        - motion_group
        - trajectory
      properties:
        motion_group:
          type: string
          description: Unique identifier of the motion group the trajectory is planned for.
        trajectory:
          $ref: '#/components/schemas/JointTrajectory'
          description: |
            The trajectory consisting of a list of joint positions and
            an equal number of corresponding timestamps.
        tcp:
          type: string
          description: Unique identifier of the tool the trajectory is planned for.
    TcpRequired:
      title: TcpRequired
      type: object
      properties:
        tcp_missing:
          properties: {}
      description: Requested motion group requires TCP to be defined.
    InconsitentTrajectorySize:
      title: InconsitentTrajectorySize
      type: object
      properties:
        inconsistent_trajectory_size:
          type: object
          properties:
            joint_position_size:
              type: integer
              format: int32
            times_size:
              type: integer
              format: int32
            locations_size:
              type: integer
              format: int32
    JointLimitExceeded:
      title: JointLimitExceeded
      type: object
      properties:
        joint_limit_exceeded:
          $ref: '#/components/schemas/FeedbackJointLimitExceeded'
    Collision-2:
      title: Collision
      type: object
      properties:
        collision:
          $ref: '#/components/schemas/FeedbackCollision'
    TorqueExceeded:
      title: TorqueExceeded
      type: object
      properties:
        torque_exceeded:
          type: object
          properties:
            torque_value:
              type: number
              format: double
              description: |
                The torque value that was exceeded.
            torque_limit:
              type: number
              format: double
              description: |
                The value of the torque limit that was exceeded.
    InvalidDof:
      title: InvalidDof
      type: object
      properties:
        invalid_dof:
          type: object
          properties:
            valid_dof:
              type: integer
              format: int32
              description: |
                The valid degrees of freedom for the motion group.
            joint_position:
              type: array
              items:
                type: number
                format: double
              description: The joint position that is out of its limits.
    NanValue:
      title: NanValue
      type: object
      properties:
        nan_value:
          type: object
          properties:
            joint_position:
              type: array
              items:
                type: number
                format: double
              description: The joint position that is out of its limits.
          description: Requested joint position contains NaN values.
    AddTrajectoryError:
      title: AddTrajectoryError
      type: object
      properties:
        message:
          type: string
        location:
          type: number
          format: double
          description: |
            The location of the error in the trajectory.
        data:
          oneOf:
            - $ref: '#/components/schemas/TcpRequired'
            - $ref: '#/components/schemas/InconsitentTrajectorySize'
            - $ref: '#/components/schemas/JointLimitExceeded'
            - $ref: '#/components/schemas/Collision-2'
            - $ref: '#/components/schemas/TorqueExceeded'
            - $ref: '#/components/schemas/InvalidDof'
            - $ref: '#/components/schemas/NanValue'
    AddTrajectoryResponse:
      title: AddTrajectoryResponse
      type: object
      properties:
        trajectory:
          type: string
          description: |
            The unique identifier of the trajectory. Use this identifier to execute the trajectory with the [executeTrajectory](executeTrajectory) endpoint.
        error:
          $ref: '#/components/schemas/AddTrajectoryError'
          description: |
            Always check this field first. If this field is present, the trajectory has an error and is only partially or not executable.
      description: |
        The response signals if the trajectory is valid or faulty resulting in an executable, partially executable or not executable state.
        - valid trajectory: response contains only the unique identifier for the trajectory
        - trajectory has error on path: response contains the unique identifier for the trajectory and information about the failure. It is executable up to the point of failure.
        - trajectory has error at start or invalid data: response contains only information about the failure.

        To execute the trajectory use the unique identifier for calling [executeTrajectory](executeTrajectory).
        If you want to validate your trajectory before execution, execute it with a virtual motion group and check the state in the response stream of [executeTrajectory](executeTrajectory).
    Movement:
      title: Movement
      type: object
      required:
        - movement
      properties:
        movement:
          type: object
          required:
            - time_to_end
            - current_location
            - state
          properties:
            time_to_end:
              type: integer
              description: Remaining time in milliseconds (ms) to reach the end of the motion.
              format: uint32
            current_location:
              type: number
              description: Current location of motion group on the trajectory.
              format: double
            state:
              $ref: '#/components/schemas/RobotControllerState'
              description: Current state of the robot controller and moving motion group.
      description: |
        Sent during trajectory movement, response-rate closest to the nearest multiple of controller step-rate but not exceeding the configured rate.
    StandstillReason:
      format: enum
      type: string
      enum:
        - REASON_MOTION_ENDED
        - REASON_USER_PAUSED_MOTION
        - REASON_WAITING_FOR_IO
        - REASON_PAUSED_ON_IO
      description: The reason why the movement is paused.
    Standstill:
      title: Standstill
      type: object
      required:
        - standstill
      properties:
        standstill:
          required:
            - reason
            - location
            - state
          type: object
          properties:
            reason:
              $ref: '#/components/schemas/StandstillReason'
            location:
              type: number
              format: double
            state:
              $ref: '#/components/schemas/RobotControllerState'
              description: Current state of the controller and motion group which came to a standstill.
      description: The response will be sent one time at the end of every execution signalling that the motion group has stopped moving.
    MoveToTrajectoryViaJointPTPResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Movement'
        - $ref: '#/components/schemas/Standstill'
    TrajectoryId:
      title: TrajectoryId
      required:
        - id
        - message_type
      type: object
      properties:
        message_type:
          type: string
          const: TrajectoryId
          description: |
            Type specifier for server, set automatically.
        id:
          type: string
          description: |
            The identifier of the trajectory which was returned by the [addTrajectory](addTrajectory) endpoint.
    TrajectoryData:
      title: TrajectoryData
      required:
        - data
        - message_type
      type: object
      properties:
        message_type:
          type: string
          const: TrajectoryData
          description: |
            Type specifier for server, set automatically.
        motion_group:
          type: string
          description: Identifier of the motion-group.
        data:
          $ref: '#/components/schemas/JointTrajectory'
          description: |
            The trajectory consisting of a list of joint positions and
            an equal number of corresponding timestamps.
        tcp:
          type: string
          description: Unique identifier of the tool the trajectory is planned for.
    InitializeMovementRequest:
      title: InitializeMovementRequest
      required:
        - trajectory
      type: object
      properties:
        message_type:
          type: string
          const: InitializeMovementRequest
          description: |
            Type specifier for server, set automatically.
        trajectory:
          oneOf:
            - $ref: '#/components/schemas/TrajectoryId'
            - $ref: '#/components/schemas/TrajectoryData'
          discriminator:
            propertyName: message_type
            mapping:
              TrajectoryId: '#/components/schemas/TrajectoryId'
              TrajectoryData: '#/components/schemas/TrajectoryData'
          description: |
            The trajectory which should be executed and locked to the connection.
        initial_location:
          type: number
          format: double
          description: |
            Location on trajectory where the execution will start.
            The default value is the start (forward movement) or end (backward movement) of the trajectory.
            If you want to start your movement from an arbitrary location, e.g. in combination with [streamMoveToTrajectoryViaJointPTP](streamMoveToTrajectoryViaJointPTP),
            set the location by respecting the following format:
            - The location is a scalar value that defines a position along a path, typically ranging from 0 to `n`,
              where `n` denotes the number of motion commands
            - Each integer value of the location corresponds to a specific motion command,
              while non-integer values interpolate positions within the segments.
            - The location is calculated from the joint path
        response_rate:
          type: integer
          format: uint32
          description: |
            Update rate for the response message in milliseconds (ms). Default is 200 ms.
            Recommendation: As Wandelbots NOVA updates states in the controller's step rate, use either the controller's step rate or a multiple of it.
                            Wandelbots NOVA will not interpolate the state but rather round it to the nearest step rate below the configured response rate.
            Minimal response rate is the step rate of controller.
        response_coordinate_system:
          type: string
          description: |
            Unique identifier addressing a coordinate system to which the responses are transformed.
            If not set, world coordinate system is used.
      description: |
        Sets up connection by locking a trajectory for execution. The robot controller mode is set to control mode.
        ATTENTION: This request has to be sent before any StartMovementRequest is sent.
                   If initializing the movement was successful, no further movements can be initialized. To execute another trajectory, another connection has to be established.
    Direction:
      format: enum
      type: string
      enum:
        - DIRECTION_FORWARD
        - DIRECTION_BACKWARD
      default: DIRECTION_FORWARD
      description: |
        The direction in which the trajectory is executed. Default: Forward.
    StartOnIO:
      required:
        - io
        - comparator
      type: object
      properties:
        io:
          oneOf:
            - $ref: '#/components/schemas/IOBooleanValue'
            - $ref: '#/components/schemas/IOIntegerValue'
            - $ref: '#/components/schemas/IOFloatValue'
          discriminator:
            propertyName: value_type
            mapping:
              boolean: '#/components/schemas/IOBooleanValue'
              integer: '#/components/schemas/IOIntegerValue'
              float: '#/components/schemas/IOFloatValue'
        comparator:
          $ref: '#/components/schemas/Comparator'
          description: |
            Comparator for the comparison of two values.
            Use the measured I/O as the base value (a) and the expected input/output value as the comparator (b): e.g., a > b.
      description: Defines an input/output that the motion should wait for to start the execution.
    PauseOnIO:
      required:
        - io
        - comparator
      type: object
      properties:
        io:
          oneOf:
            - $ref: '#/components/schemas/IOBooleanValue'
            - $ref: '#/components/schemas/IOIntegerValue'
            - $ref: '#/components/schemas/IOFloatValue'
          discriminator:
            propertyName: value_type
            mapping:
              boolean: '#/components/schemas/IOBooleanValue'
              integer: '#/components/schemas/IOIntegerValue'
              float: '#/components/schemas/IOFloatValue'
        comparator:
          $ref: '#/components/schemas/Comparator'
          description: |
            Comparator for the comparison of two values.
            Use the measured I/O as the base value (a) and the expected input/output value as the comparator (b): e.g., a > b.
      description: Defines an input/output that the motion will be paused for. The motion will stop gracefully on path.
    StartMovementRequest:
      title: StartMovementRequest
      type: object
      required:
        - direction
      properties:
        message_type:
          type: string
          const: StartMovementRequest
          description: |
            Type specifier for server, set automatically.
        direction:
          $ref: '#/components/schemas/Direction'
        set_ios:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/IOBooleanValue'
              - $ref: '#/components/schemas/IOIntegerValue'
              - $ref: '#/components/schemas/IOFloatValue'
            discriminator:
              propertyName: value_type
              mapping:
                boolean: '#/components/schemas/IOBooleanValue'
                integer: '#/components/schemas/IOIntegerValue'
                float: '#/components/schemas/IOFloatValue'
          description: |
            Attaches a list of input/output commands to the trajectory. The inputs/outputs are set to the specified values right after the specified location was reached.
            If the specified location is located before the start location (forward direction: value is smaller, backward direction: value is bigger), the input/output is not set.
        start_on_io:
          $ref: '#/components/schemas/StartOnIO'
          description: |
            Defines an input/output that is listened to before the movement. Execution starts if the defined comparator evaluates to `true`.
        pause_on_io:
          $ref: '#/components/schemas/PauseOnIO'
          description: |
            Defines an input/output that is listened to during the movement. Execution pauses if the defined comparator evaluates to `true`.
      description: |
        Moves the motion group along a trajectory, added via [planTrajectory](planTrajectory) or [planMotion](planMotion).
        Trajectories can be executed forwards or backwards("in reverse").

        Pause the execution with PauseMovementRequest.
        Resume execution with StartMovementRequest.

        Precondition: To start execution, the motion group must be located at the trajectory's start location specified in InitializeMovementRequest.
    PauseMovementRequest:
      title: PauseMovementRequest
      type: object
      properties:
        message_type:
          type: string
          const: PauseMovementRequest
          description: |
            Type specifier for server, set automatically.
        send_response:
          type: boolean
          default: true
          description: |
            Defaults to `true`.
            Set to true to get a response signalling successful initiation to pause the movement.
      description: |
        Request to pause the movement execution. Movement pauses as soon as a [Standstill](Standstill.yaml) is sent back to the client.
        Resume movement with StartMovementRequest.
    PlaybackSpeedRequest:
      title: PlaybackSpeedRequest
      required:
        - playback_speed_in_percent
      type: object
      properties:
        message_type:
          type: string
          const: PlaybackSpeedRequest
          description: |
            Type specifier for server, set automatically.
        playback_speed_in_percent:
          type: integer
          format: uint32
          description: |
            Sets velocity for executed movements of the trajectory, in percent. 100% means that the motion group moves as
            fast as possible without violating any planning and motion group limits. Setting this value does not affect the overall shape of the velocity profile.
            The velocity profile of the trajectory is scaled down by the same factor. Therefore, this should only be used for teaching and trajectory
            evaluation purposes. To maintain a specific velocity, set the respective limits when planning the trajectory.
      description: |
        Sets velocity for executed movements of the motion, in percent. Send after initializing the connection with InitializeMovementRequest.
    InitializeMovementResponse:
      title: InitializeMovementResponse
      type: object
      required:
        - init_response
      properties:
        init_response:
          type: object
          required:
            - succeeded
          properties:
            succeeded:
              type: boolean
              description: |
                Indicates if the trajectory was successfully locked and is ready for execution by sending a StartMovementRequest.
                Send PlaybackSpeedRequest to override the planned velocity.
            error_message:
              type: string
              description: Error message in case of invalid InitializeMovementRequest.
      description: |
        Response for InitializeMovementRequest message.
    PauseMovementResponse:
      title: PauseMovementResponse
      type: object
      required:
        - pause_response
      properties:
        pause_response:
          type: object
          required:
            - succeeded
          properties:
            succeeded:
              type: boolean
              description: Indicates if PauseMovementRequest can be executed.
            error_message:
              type: string
              description: |
                Error message in case of invalid PauseMovementRequest or failure while claiming motion.
      description: |
        Response for PauseMovementRequest message.
        ATTENTION: No confirmation that the movement was paused. Confirmation that the PauseMovementRequest was received and is processed.
                   End of movement execution is signalled by [StillstandResponse](StillstandResponse).
    PlaybackSpeedResponse:
      title: PlaybackSpeedResponse
      type: object
      required:
        - playback_speed_response
      properties:
        playback_speed_response:
          type: object
          required:
            - requested_value
          properties:
            requested_value:
              type: integer
              format: uint32
              description: Value of the requested playback speed in percent [%].
    MovementError:
      title: MovementError
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - error_message
          properties:
            error_message:
              type: string
              description: |
                Human-readable error details that describes the error.
      description: |
        Response signalling an error during trajectory execution.
        This response is sent in case of an unexpected error , e.g. controller disconnects.
        The error details are described in the error_message field.
    ExecuteTrajectoryResponse:
      title: ExecuteTrajectoryResponse
      type: object
      oneOf:
        - $ref: '#/components/schemas/InitializeMovementResponse'
        - $ref: '#/components/schemas/Movement'
        - $ref: '#/components/schemas/Standstill'
        - $ref: '#/components/schemas/PauseMovementResponse'
        - $ref: '#/components/schemas/PlaybackSpeedResponse'
        - $ref: '#/components/schemas/MovementError'
    InitializeJoggingRequest:
      title: InitializeJoggingRequest
      type: object
      required:
        - motion_group
      properties:
        message_type:
          type: string
          const: InitializeJoggingRequest
          description: |
            Type specifier for server, set automatically.
        motion_group:
          type: string
          description: Identifier of the motion group.
        tcp:
          type: string
          description: |
            Identifier of the tool. Required for robots (all limits, including TCP limits, are respected at all times regardless of the motion). Not required for external axes.
        response_rate:
          type: integer
          format: uint32
          default: 200
          description: |
            Update rate for the response message in milliseconds (ms).

            Recommendation: As Wandelbots NOVA updates states in the controller's step rate, use either the controller's step rate or a multiple of it.
                            Wandelbots NOVA will not interpolate the state but round it to the nearest step rate below the configured response rate.
            Use [getOptimizerConfiguration](getOptimizerConfiguration) to get the controller's step rate.

            Minimal response rate is the step rate of the controller.
        response_coordinate_system:
          type: string
          description: |
            Unique identifier addressing a coordinate system to which the responses are transformed.
            If not set, world coordinate system is used.
        pause_on_io:
          type: string
          description: |
            Defines an input/output that is listened to during the movement. Execution pauses if the defined comparator evaluates to `true`.
      description: Send this message to start jogging a motion group.
    JointVelocityRequest:
      title: JointVelocityRequest
      type: object
      required:
        - velocity
      properties:
        message_type:
          type: string
          const: JointVelocityRequest
          description: Type specifier for server, set automatically.
        velocity:
          $ref: '#/components/schemas/Joints'
          description: in [rad/s]
      description: Sets target joint velocities for jogging a motion group.
    TcpVelocityRequest:
      title: TcpVelocityRequest
      type: object
      required:
        - translation
        - rotation
      properties:
        message_type:
          type: string
          const: TcpVelocityRequest
          description: |
            Type specifier for server, set automatically.
        translation:
          $ref: '#/components/schemas/Vector3d'
        rotation:
          $ref: '#/components/schemas/Vector3d'
        use_tool_coordinate_system:
          type: boolean
          default: false
          description: |
            If true, TCP velocities are interpreted in the tool coordinate system, specified by the TCP.
            If false, TCP velocities are interpreted in the world coordinate system.
      description: Sets target TCP velocities for jogging a motion group.
    InitializeJoggingResponse:
      title: InitializeJoggingResponse
      type: object
      properties:
        init_response:
          type: object
          required:
            - succeeded
          properties:
            succeeded:
              type: boolean
              description: |
                Indicates if the jogging control is ready for execution.
            error_message:
              type: string
              description: Error message in case of invalid InitializeMovementRequest.
      required:
        - init_response
      description: Response to an InitializeJoggingRequest.
    JoggingState:
      oneOf:
        - title: JoggingRunning
          type: object
          properties:
            running:
              type: object
              properties: {}
          required:
            - running
        - title: JoggingPausedUserRequest
          type: object
          properties:
            paused_by_user_request:
              type: object
              properties: {}
          required:
            - paused_by_user_request
        - title: JoggingPausedJointLimit
          type: object
          properties:
            paused_near_joint_limit:
              type: object
              properties:
                joint_indices:
                  type: array
                  items:
                    type: integer
                    format: uint32
          required:
            - paused_near_joint_limit
        - title: JoggingPausedCollision
          type: object
          properties:
            paused_near_collision:
              type: object
              properties:
                description:
                  type: string
          required:
            - paused_near_collision
        - title: JoggingPausedOnIO
          type: object
          properties:
            paused_on_io:
              type: object
              properties: {}
          required:
            - paused_on_io
    JoggingResponse:
      title: JoggingResponse
      type: object
      properties:
        jogging:
          type: object
          required:
            - jogging_state
            - robot_controller_state
          properties:
            jogging_state:
              $ref: '#/components/schemas/JoggingState'
            robot_controller_state:
              $ref: '#/components/schemas/RobotControllerState'
      required:
        - jogging
      description: |
        Sent during jogging movement, response-rate closest to the nearest multiple of controller step-rate but not exceeding the configured rate.
    JoggingErrorResponse:
      title: JoggingErrorResponse
      type: object
      properties:
        error:
          type: object
          required:
            - error_message
          properties:
            error_message:
              type: string
              description: Error description.
      required:
        - error
      description: |
        Response signalling an error during jogging execution.
        This response is sent in case of an unexpected error, e.g. controller disconnects.
    ExecuteJoggingResponse:
      title: ExecuteJoggingResponse
      type: object
      oneOf:
        - $ref: '#/components/schemas/InitializeJoggingResponse'
        - $ref: '#/components/schemas/JoggingResponse'
        - $ref: '#/components/schemas/JoggingErrorResponse'
    ProgramRunState:
      type: string
      enum:
        - not started
        - running
        - completed
        - failed
        - stopped
      title: ProgramRunState
    ProgramRunReference:
      properties:
        id:
          type: string
          title: Id
        state:
          $ref: '#/components/schemas/ProgramRunState'
      type: object
      required:
        - id
        - state
      title: ProgramRunReference
    ProgramRequest:
      title: ProgramRequest
      type: object
      properties:
        program:
          type: string
          title: Program
          default: |
            # Read the current pose of the robot.
            #
            # Note: Please replace <controller_id> with the controller name you've
            #   selected and <motion_group_id> with the motion group ID
            #
            # Example:
            #   - "0@abb" = get_controller("abb")[0]
            #   - "1@fanuc" = get_controller("fanuc")[1]
            #
            robot = get_controller("controller")[0]
            tcp("Flange")
            home = read(robot, "pose")
            sync

            # Set the velocity of the robot to 200 mm/s
            velocity(200)

            for i = 0..3:
                move via ptp() to home
                # Move to a pose concatenating the home pose
                move via line() to (50, 20, 30, 0, 0, 0) :: home
                move via line() to (100, 20, 30, 0, 0, 0) :: home
                move via line() to (50, 20, 30, 0, 0, 0) :: home
                move via ptp() to home
        default_robot:
          type: string
          title: Default Robot
          description: Identifier of the default robot to use for execution
        default_tcp:
          type: string
          title: Default Tcp
          description: Identifier of the default TCP to use for execution
        run_args:
          type: object
          title: Run Args
          description: Initial arguments that are available within the program
      required:
        - program
    ValidationError-2:
      properties:
        loc:
          items:
            type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    HTTPValidationError-2:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError-2'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    RobotState:
      title: RobotState
      description: Collection of information on the current state of the robot.
      type: object
      properties:
        pose:
          $ref: '#/components/schemas/Pose'
        joints:
          items:
            type: number
          type: array
          title: Joints
      required:
        - pose
    ProgramRunResult:
      properties:
        motion_group_id:
          type: string
          title: Motion Group Id
          description: Unique identifier of the motion group that was executed
        motion_duration:
          type: number
          title: Motion Duration
          description: Total execution duration of the motion group
        paths:
          items:
            items:
              $ref: '#/components/schemas/RobotState'
            type: array
          type: array
          title: Paths
          description: Paths of the motion group as list of Path objects
      type: object
      required:
        - motion_group_id
        - motion_duration
        - paths
      title: ProgramRunResult
      description: |-
        The ProgramRunResult object contains the execution results of a robot.

        Arguments:
            motion_group_id: The unique identifier of the motion group
            motion_duration: The total execution duration of the motion group
            paths: The paths of the motion group as list of Path objects
    ProgramRun:
      title: ProgramRun
      description: Holds the state of a program run.
      type: object
      properties:
        id:
          type: string
          title: Id
          description: Unique identifier of the program run
        state:
          $ref: '#/components/schemas/ProgramRunState'
          description: State of the program run
        logs:
          type: string
          title: Logs
          description: Logs of the program run
        stdout:
          type: string
          title: Stdout
          description: Stdout of the program run
        store:
          type: object
          title: Store
          description: Stores runtime variables of the run
        error:
          type: string
          title: Error
          description: Error message of the program run, if any
        traceback:
          type: string
          title: Traceback
          description: Traceback of the program run, if any
        start_time:
          type: number
          title: Start Time
          description: Start time of the program run
        end_time:
          type: number
          title: End Time
          description: End time of the program run
        execution_results:
          items:
            $ref: '#/components/schemas/ProgramRunResult'
          type: array
          title: Execution Results
          description: Execution results of the program run
      required:
        - id
        - state
    MotionGroupInfo:
      required:
        - motion_group
        - name
        - dof
      type: object
      properties:
        motion_group:
          type: string
          description: |
            The unique identifier of the motion group. Use it to refer to the motion group in other calls.
        name:
          type: string
          description: |
            The name of the motion group for display purposes.
        dof:
          type: integer
          format: uint32
          description: |
            The number of joints aka degrees of freedom in the motion group.
    MotionGroupInfos:
      required:
        - motion_groups
      type: object
      properties:
        motion_groups:
          type: array
          items:
            $ref: '#/components/schemas/MotionGroupInfo'
    MotionGroupJoints:
      required:
        - positions
      type: object
      properties:
        positions:
          type: array
          items:
            type: number
            format: double
          description: |
            The joint positions of the motion group.
        velocities:
          type: array
          items:
            type: number
            format: double
          description: |
            The joint velocities of the motion group.
        accelerations:
          type: array
          items:
            type: number
            format: double
          description: |
            The joint accelerations of the motion group.
        torques:
          type: array
          items:
            type: number
            format: double
          description: |
            The joint torques of the motion group.
      description: |-
        Ensure to provide one value for each joint. See [getMotionGroups](getMotionGroups) for the number of joints.
        Everything but positions is optional.
    CoordinateSystems:
      required:
        - coordinate_systems
      type: object
      properties:
        coordinate_systems:
          type: array
          items:
            $ref: '#/components/schemas/CoordinateSystem'
    RobotTcps:
      required:
        - tcps
      type: object
      properties:
        tcps:
          type: array
          items:
            $ref: '#/components/schemas/RobotTcp'
          example:
            - id: BASE/schmalz_gripper
              readable_name: BASE/schmalz_gripper
              position:
                - 0
                - 0
                - 110
              orientation:
                - 0
                - 0
                - 0
                - 1
              orientation_type: QUATERNION
            - id: WB_EGM/egm_tool
              readable_name: WB_EGM/egm_tool
              position:
                - 400
                - 250
                - 0
              orientation:
                - 1.57079632679
                - 0
                - 3.14159265359
              orientation_type: ROTATION_VECTOR
    Flag:
      required:
        - active
      type: object
      properties:
        active:
          type: boolean
    OpMode:
      required:
        - mode
      type: object
      description: |
        Controllers have two operating modes: AUTOMATIC and MANUAL.
        MANUAL mode is mainly used for teaching a robot application.
        To ensure safe operation the velocity of the robot is limited to 250 mm/s.
        Running the finished application is done in AUTOMATIC operating mode without the limited velocity of the MANUAL mode.
      properties:
        mode:
          $ref: '#/components/schemas/OperationMode'
    CycleTime:
      required:
        - cycle_time_ms
      type: object
      properties:
        cycle_time_ms:
          type: integer
          description: Cycle time of controller communication in [ms].
          format: uint32
    Behavior:
      enum:
        - BEHAVIOR_AUTOMATIC
        - BEHAVIOR_AUTOMATIC_NOT_COMPLY_WITH_CYCLETIME
        - BEHAVIOR_EXTERNAL_SOURCE
      description: |
        ## BEHAVIOR_AUTOMATIC
        This is the default behavior.
        The motion group instantly takes any commanded joint configuration as actual joint state.
        Configures the compliance of the virtual robot with the normal ControllerState cycle time. If set, the virtual robot will act like a physical one, e.g. with a cycle time of 8ms to respond to a new joint state command.
        ## BEHAVIOR_AUTOMATIC_NOT_COMPLY_WITH_CYCLETIME
        Configures the compliance of the virtual robot with the normal ControllerState cycle time. If set, the robot will respond as fast as possible, limited only by software execution speed. Because of that the execution of a movement requires less time than with BEHAVIOR_AUTOMATIC.
        ## BEHAVIOR_EXTERNAL_SOURCE
        The external client is the only source of actual joint state changes.
        This mode is used to enable third party software indicating the current joint state via [externalJointsStream](externalJointsStream).
      type: string
      format: enum
    MotionGroupBehaviorGetter:
      required:
        - behavior
      type: object
      properties:
        behavior:
          $ref: '#/components/schemas/Behavior'
    ExternalJointStreamDatapointValue:
      required:
        - positions
        - velocities
        - accelerations
        - torques
      type: object
      properties:
        positions:
          type: array
          items:
            type: number
            format: double
          description: The joint positions of the robot.
        velocities:
          type: array
          items:
            type: number
            format: double
          description: The joint velocities of the robot.
        accelerations:
          type: array
          items:
            type: number
            format: double
          description: The joint accelerations of the robot.
        torques:
          type: array
          items:
            type: number
            format: double
          description: The joint torques of the robot.
      description: The joint-values of the external joint stream datapoint.
    ExternalJointStreamDatapoint:
      required:
        - motion_group
        - value
      type: object
      properties:
        motion_group:
          type: string
          description: |
            The unique identifier of the motion group.
        value:
          $ref: '#/components/schemas/ExternalJointStreamDatapointValue'
      description: A datapoint inside external joint stream.
    Key:
      title: Key
      description: |
        Unique identifier describing to adress an object.

        Special characters, such as `;`, `/`, `?`, `:`, `@`, `=` and `&`, have to be URL encoded.
      type: string
    MetadataObject:
      description: A metadata object.
      type: object
      additionalProperties:
        type: string
      example:
        alias: Some Other Name
        is_hidden: false
    BinaryObject:
      description: Any value encoded as a binary string.
      format: binary
      title: BinaryObject
      type: string
    ProgramName:
      title: Program Name
      description: Unique identifier of a program.
      type: string
    ProgramContent:
      type: string
      description: The content of a program.
    program_run_object:
      type: object
      required:
        - id
        - program_id
        - status
        - created_at
        - last_updated_at
      properties:
        id:
          type: string
          description: The identifier of the program run.
        program_id:
          type: string
          description: The identifier of the program stored in the program library.
        status:
          type: string
          description: The status of the program run which shows which state the program run is currently is in.
        program_output:
          type: string
          description: The output of the program run, which provides the output generate while running the program.
        created_at:
          type: string
          format: date-time
          description: ISO 8601 date-time format when the program run was created.
        last_updated_at:
          type: string
          format: date-time
          description: ISO 8601 date-time format when the program run was last updated.
    trigger_type:
      type: string
      description: The type of the trigger.
      enum:
        - opcua_node_value
    OpcuaNodeValueTriggerConfig:
      type: object
      description: |
        Configuration for an OPC UA node value trigger.
        When the specified node has the specified value
        the trigger condition is met and the program is executed.
      required:
        - host
        - node_id
        - node_value
      properties:
        host:
          type: string
          description: Url of the OPC UA server.
        node_id:
          type: string
          description: Identifier of the OPC UA node to monitor.
        node_value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          description: Value to trigger the program when matched.
    trigger_object:
      type: object
      required:
        - trigger_id
        - program_id
        - enabled
        - config
        - type
        - created_at
        - last_updated_at
      properties:
        id:
          type: string
          description: The identifier of the trigger.
        program_id:
          type: string
          description: The identifier of the program to run when the trigger condition is met.
        enabled:
          type: boolean
          description: Indicates whether the trigger is enabled or not.
        type:
          $ref: '#/components/schemas/trigger_type'
        config:
          $ref: '#/components/schemas/OpcuaNodeValueTriggerConfig'
        created_at:
          type: string
          format: date-time
          description: ISO 8601 date-time format when the trigger was created.
        last_updated_at:
          type: string
          format: date-time
          description: ISO 8601 date-time format when the trigger was last updated.
        program_runs:
          type: array
          description: The program runs that were triggered by this trigger.
          items:
            type: string
            description: The identifier of the program run that was triggered by this trigger.
    CollisionMotionGroupDictionary:
      type: object
      title: Collision Motion Group Dictionary
      description: |
        Maps a Wandelbots NOVA motion group to its configuration in the collision scene. Key must be a motion group identifier.

        Values are collision motion group objects.

        A collision motion group defines a motion group in the collision scene.

        The motion group is attached to the origin of the scene.
        To relocate the motion group, configure its mounting offset on the physical controller.
        This ensures that the definition of motion commands and collision scenes use the same coordinate system.
        The kinematic chain looks like this:
        - Origin >> Mounting >> Base >> Joint 0 >> Link 0 >> Joint 1 >> [â€¦] >> TCP

        A `tool` is treated like another link attached to the end (flange) of the kinematic chain.
        All tool colliders are described in the flange frame.
      additionalProperties:
        $ref: '#/components/schemas/CollisionMotionGroup'
    CollisionScene:
      title: Collision Scene
      type: object
      properties:
        colliders:
          $ref: '#/components/schemas/ColliderDictionary'
        motion_groups:
          $ref: '#/components/schemas/CollisionMotionGroupDictionary'
      description: |
        Defines the collision scene.

        There are two types of objects in the scene:
        - `colliders`: Each collider is attached directly to the origin of the scene: Origin >> Collider
        - `motion-groups`: Each motion group is assigned a kinematic chain of links with a special collider, called tool, attached to the last element.
          The motion group is attached to the origin of the scene via its mounting: Origin >> Mounting >> Motion Group Base >> [â€¦]
      examples:
        - colliders:
            annoying_obstacle:
              shape:
                shape_type: sphere
                radius: 100
              pose:
                position:
                  - 0
                  - 0
                  - 500
          motion_groups:
            my_ur5:
              link_chain:
                - link_0_sphere:
                    shape:
                      shape_type: sphere
                      radius: 10
                    pose:
                      position:
                        - 0
                        - 0
                        - -10
                  link_0_capsule:
                    shape:
                      shape_type: capsule
                      radius: 5
                      cylinder_height: 20
                - {}
                - link_2_capsule:
                    shape:
                      shape_type: capsule
                      radius: 5
                      cylinder_height: 20
    CollisionMotionGroupAssembly:
      title: Collision Motion Group Assembly
      type: object
      properties:
        stored_link_chain:
          type: string
          description: |
            References a stored link chain.
        stored_tool:
          type: string
          description: |
            References a stored tool.
        link_chain:
          $ref: '#/components/schemas/LinkChain'
        tool:
          $ref: '#/components/schemas/Tool'
    CollisionMotionGroupAssemblyDictionary:
      title: Map Motion Group to Collision Motion Group Assembly
      type: object
      description: |
        Maps a Wandelbots NOVA motion group to its assembly configuration in the collision scene. Key must be a motion group identifier.

        A collision motion group defines a motion group in the collision scene.

        The motion group is attached to the origin of the scene.
        To relocate the motion group, configure its mounting offset on the physical controller.
        This ensures that the definition of motion commands and collision scenes use the same coordinate system.
        The kinematic chain looks like this:
        - Origin >> Mounting >> Base >> Joint 0 >> Link 0 >> Joint 1 >> [â€¦] >> TCP

        A `tool` is treated like another link attached to the end (flange) of the kinematic chain.
        All tool colliders are described in the flange frame.
      additionalProperties:
        $ref: '#/components/schemas/CollisionMotionGroupAssembly'
    CollisionSceneAssembly:
      title: Collision Scene Assembly
      type: object
      description: |
        Defines the collision scene assembly. Merges all referenced and new scene components into a single scene.

        Previously added components with identical identifiers are overwritten within the same group.

        There is one group for each of the following components:
        - Colliders attached to the origin of the scene,
        - Tool per motion group, and
        - For each link per motion group.

        The scene is assembled by adding components in the following order.
        1. stored_scenes
        2. scene
        3. stored_colliders
        4. colliders
        5. stored_link_chains and stored_tools (per motion group)
        6. link_chains and tools (per motion group)
      properties:
        stored_scenes:
          type: array
          items:
            type: string
          title: Stored Scene identifiers
          description: |
            Add stored scenes to the scene via their identifiers.
            The scenes are merged based on their order in the array.
            The scene at index zero serves as base.
            Following scenes overwrite components with identical identifiers, see [Collision Scene Assembly](Collision Scene Assembly).
        scene:
          $ref: '#/components/schemas/CollisionScene'
        stored_colliders:
          type: array
          items:
            type: string
          title: Stored Collider identifiers
          description: |
            Add stored colliders to the scene via their identifiers.
            The colliders are added to the the origin of the scene.
        colliders:
          $ref: '#/components/schemas/ColliderDictionary'
        motion_groups:
          $ref: '#/components/schemas/CollisionMotionGroupAssemblyDictionary'
  parameters:
    Timeout:
      name: completion_timeout
      in: query
      schema:
        type: integer
        minimum: 1
        description: |
          The maximum time (**in seconds**) spent waiting until the operation is complete.

          If the parameter is set, the request will wait for completion until the specified time is up.
          For POST and PUT requests completion means that all resources are running and usable.
          For DELETE completion means that the deletion process is completed.
      x-go-name: CompletionTimeout
    Cell:
      name: cell
      in: path
      description: |
        Unique identifier addressing a cell in all API calls.
      required: true
      schema:
        type: string
        default: cell
      x-go-name: CellID
    Controller:
      name: controller
      in: path
      description: Unique identifier to address a controller in the cell.
      required: true
      schema:
        type: string
      x-go-name: ControllerID
    App:
      name: app
      in: path
      required: true
      schema:
        type: string
        description: |
          The name of the provided application.
          The name must be unique within the cell and is used as a identifier for addressing the application in all API calls, e.g. when updating the application.
      x-go-name: AppID
    Resources:
      name: resources
      in: query
      style: form
      explode: false
      required: true
      description: List of resource identifiers to included in the backup and restore operations.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ConfigurationResourceId'
    Metadata:
      name: metadata
      in: query
      style: form
      explode: false
      description: Additional metadata to add to the backup
      schema:
        $ref: '#/components/schemas/Metadata'
    CoordinateSystem:
      name: coordinate-system
      in: path
      description: Unique identifier addressing a coordinate system.
      required: true
      schema:
        type: string
      x-go-name: CoordinateSystemID
    MotionGroup:
      name: motion-group
      in: path
      description: The motion-group identifier.
      required: true
      schema:
        type: string
      x-go-name: MotionGroupID
    ResponseRate:
      name: response_rate
      in: query
      schema:
        type: integer
        format: uint32
      description: |-
        Update rate for the response message in milliseconds (ms). Default is 200 ms.
        We recommend to use the step rate of the controller or a multiple of the step rate as NOVA updates the state in the controller's step rate as well.
        Minimal response rate is the step rate of controller.
    ResponseCoordinateSystem:
      name: response_coordinate_system
      in: query
      schema:
        type: string
      description: |
        Unique identifier addressing a coordinate system to which the cartesian data of the responses should be converted.
        Default is the world coordinate system.
    Trajectory:
      name: trajectory
      in: path
      description: |
        This represents the unique identifier of a trajectory.
        Every executable or partially executable trajectory is cached and an unique identifier is returned.
        Indicate the unique identifier to execute the trajectory or retrieve information on the trajectory.
      required: true
      schema:
        type: string
    ProgramRunId:
      name: run
      in: path
      required: true
      schema:
        type: string
        title: Program Run Id
    Tcp:
      name: tcp
      in: path
      description: The unique identifier of a TCP.
      required: true
      schema:
        type: string
        example: TRobUtility/current_tool
    Key:
      name: key
      in: path
      required: true
      explode: false
      style: simple
      schema:
        $ref: '#/components/schemas/Key'
      x-go-name: ObjectKey
    MetadataHeader:
      name: X-Metadata
      in: header
      required: false
      explode: false
      schema:
        $ref: '#/components/schemas/MetadataObject'
    Program:
      name: program
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ProgramName'
      x-go-name: ProgramId
    Collider:
      name: collider
      in: path
      description: Unique identifier addressing a collider.
      required: true
      schema:
        type: string
      x-go-name: ColliderID
    LinkChain:
      name: link-chain
      in: path
      description: Unique identifier addressing a collision link chain.
      required: true
      schema:
        type: string
      x-go-name: LinkChainID
    MotionGroupModelParameter:
      name: motion-group-model
      in: path
      description: |
        Unique identifier for the model of a motion group, e.g. `UniversalRobots_UR10e`.

        Get the `model` of a configured motion group with [getOptimizerConfiguration](getOptimizerConfiguration).
      required: true
      schema:
        $ref: '#/components/schemas/MotionGroupModel'
    Tool:
      name: tool
      in: path
      description: Unique identifier addressing a collision tool.
      required: true
      schema:
        type: string
      x-go-name: ToolID
    Scene:
      name: scene
      in: path
      description: Unique identifier addressing a collision scene.
      required: true
      schema:
        type: string
      x-go-name: SceneID
  examples:
    DefaultCell:
      summary: A cell with the default configured Foundation Services
      value:
        name: cell
    AbbController:
      value:
        name: abb-robot
        configuration:
          kind: AbbController
          controller_ip: 192.168.125.1
          controller_port: 80
          egm_server:
            ip: 192.168.125.100
            port: 32112
    FanucController:
      value:
        name: fanuc-robot
        configuration:
          kind: FanucController
          controller_ip: 192.168.100.1
    KukaController:
      value:
        name: kuka-robot
        configuration:
          kind: KukaController
          controller_ip: 192.168.1.29
          controller_port: 54600
          rsi_server:
            ip: 0.0.0.0
            port: 30152
    UrController:
      value:
        name: ur-robot
        configuration:
          kind: UniversalrobotsController
          controller_ip: 192.168.1.1
    VirtualController:
      value:
        name: virtual-robot
        configuration:
          kind: VirtualController
          manufacturer: universalrobots
          type: universalrobots-ur5e
          position: '[0,0,0,0,0,0,0]'
    YaskawaController:
      value:
        name: yaskawa-robot
        configuration:
          kind: YaskawaController
          controller_ip: 192.168.255.1
    AppSwaggerUI:
      summary: SwaggerUI App example
      value:
        name: swagger-ui
        app_icon: favicon-32x32.png
        container_image:
          image: docker.io/swaggerapi/swagger-ui
        environment:
          - name: BASE_URL
            value: /swagger-ui
    CellDefault:
      value:
        - id: /cells/default
          name: default
          children:
            - id: /cells/default/controllers/yaskawa-gp7
              name: yaskawa-gp7
            - id: /cells/default/apps/my-app
              name: my-app
    PlanTrajectoryRequest_UR5e_Line:
      value:
        robot_setup:
          motion_group_type: UniversalRobots_UR5e
          mounting:
            position:
              - 0
              - 0
              - 0
            orientation:
              - 0
              - 0
              - 0
          tcp:
            position:
              - 0
              - 0
              - 0
            orientation:
              - 0
              - 0
              - 0
          safety_setup:
            global_limits:
              joint_position_limits:
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -2.8623399732707004
                  upper_limit: 2.8623399732707004
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
              joint_velocity_limits:
                - 3.14
                - 3.14
                - 3.14
                - 3.14
                - 3.14
                - 3.14
              joint_acceleration_limits:
                - 40
                - 40
                - 40
                - 40
                - 40
                - 40
        start_joint_position:
          - 1.169
          - -1.57
          - 1.36
          - 1.029
          - 1.289
          - 1.279
        motion_commands:
          - path:
              target_pose:
                position:
                  - 400
                  - 0
                  - 100
                orientation:
                  - 0
                  - 0
                  - 0
              path_definition_name: PathLine
            limits_override:
              tcp_velocity_limit: 200
    InverseKinematicsRequest_UR5e:
      value:
        robot_setup:
          motion_group_type: UniversalRobots_UR5e
          mounting:
            position:
              - 0
              - 0
              - 0
            orientation:
              - 0
              - 0
              - 0
          tcp:
            position:
              - 0
              - 0
              - 0
            orientation:
              - 0
              - 0
              - 0
          safety_setup:
            global_limits:
              joint_position_limits:
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -2.8623399732707004
                  upper_limit: 2.8623399732707004
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
                - lower_limit: -6.284930636431581
                  upper_limit: 6.284930636431581
              joint_velocity_limits:
                - 3.14
                - 3.14
                - 3.14
                - 3.14
                - 3.14
                - 3.14
              joint_acceleration_limits:
                - 40
                - 40
                - 40
                - 40
                - 40
                - 40
        tcp_poses:
          - position:
              - 400
              - 0
              - 100
            orientation:
              - 0
              - 0
              - 0
  responses:
    NotFound:
      description: Specified resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: |
        The request was invalid or cannot be sent due to other reasons. Client side error,
        e.g., malformed request syntax, invalid request parameters, or invalid content.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: |
        Too many requests sent in a given amount of time.
        The client needs to wait before sending additional requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: |
        Server does not recognize the request method or lacks the functionality to fulfil it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  headers:
    Content-Type:
      explode: false
      style: simple
      schema:
        type: string
    Content-Length:
      explode: false
      style: simple
      schema:
        type: integer
        minimum: 0
    Last-Modified:
      explode: false
      style: simple
      schema:
        type: string
        format: date-time
    Metadata:
      explode: false
      style: simple
      schema:
        $ref: '#/components/schemas/MetadataObject'
