[tool.poetry]
name = "wandelbots-nova"
version = "0.37.1"
description = "Official Python SDK for the Wandelbots"
authors = [
    "Wandelbots GmbH",
    "Christoph Biering <christoph.biering@wandelbots.com>",
    "Mahsum Demir <mahsum.demir@wandelbots.com>",
    "Dirk Sonnemann <dirk.sonnemann@wandelbots.com>",
    "Andreas Langenhagen <andreas.langenhagen@wandelbots.com>",
    "Stefan Wagner <stefan.wagner@wandelbots.com>",
    "André Kühnert <andre.kuhnert@wandelbots.com>"
]
readme = "README.md"
packages = [
    { include = "nova" },
    { include = "nova_rerun_bridge" }
]

[tool.poetry.scripts]
download-models = "nova_rerun_bridge.helper_scripts.download_models:update_robot_models"

[tool.poetry.dependencies]
python = "^3.10"
httpx = "^0.28.0"
wandelbots_api_client = "25.1.0"
websockets = "^14.1.0"
loguru = "^0.7.2"
pydantic = "^2.10.3"
numpy = "^2.1.3"
python-decouple = "^3.8"
scipy = "^1.14.1"
aiostream = "^0.6.4"
anyio = "^4.8.0"
asyncstdlib = "^3.13.0"
rerun-sdk = { version = "=0.22.0", optional = true }
requests = { version = ">=2.32.3", optional = true }
APScheduler = { version = ">=3.11.0", optional = true }
trimesh = { version = ">=4.5.3", optional = true }

[tool.poetry.group.dev.dependencies]
python-dotenv = "^1.0.1"
ruff = ">=0.8.2,<0.10.0"
pytest = "^8.3.4"
pytest-asyncio = ">=0.24,<0.26"
mypy = "^1.13.0"
pre-commit = "^4.0.1"
icecream = "^2.1.4"

[tool.poetry.extras]
nova-rerun-bridge = [
    "rerun-sdk",
    "requests",
    "APScheduler",
    "trimesh"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
addopts = """
    --doctest-modules
    --junitxml=reports/pytest.xml
    --import-mode=importlib"""
junit_family = "xunit2"
norecursedirs = "develop .ipynb_checkpoints .venv .tox *.egg"
testpaths = """
    nova
    tests
"""

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
warn_unreachable = true
warn_unused_configs = true
junit_xml = "reports/mypy/mypy.xml"
show_error_context = true
warn_unused_ignores = true
strict_equality = true
mypy_path = ".mypy_stubs"
files = "nova, tests"
namespace_packages = true
explicit_package_bases = true

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
assets = []
build_command = "pip install poetry && poetry build"
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["chore", "feat", "fix"]
minor_tags = ["feat"]
patch_tags = ["fix", "chore"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
